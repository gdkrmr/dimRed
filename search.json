[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Guido Kraemer. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kraemer G, Reichstein M, Mahecha MD (2018). “dimRed coRanking—Unifying Dimensionality Reduction R.” R Journal, 10(1), 342–358. coRanking version 0.2.6, https://journal.r-project.org/archive/2018/RJ-2018-039/index.html.","code":"@Article{,   author = {Guido Kraemer and Markus Reichstein and Miguel D. Mahecha},   title = {{dimRed} and {coRanking}---Unifying Dimensionality Reduction in R},   year = {2018},   journal = {The R Journal},   url = {https://journal.r-project.org/archive/2018/RJ-2018-039/index.html},   pages = {342--358},   volume = {10},   number = {1},   note = {coRanking version 0.2.6}, }"},{"path":"/index.html","id":"dimred","dir":"","previous_headings":"","what":"A Framework for Dimensionality Reduction","title":"A Framework for Dimensionality Reduction","text":"Framework Dimensionality Reduction R language. collection dimensionality reduction techniques R packages provides common interface calling methods.","code":""},{"path":"/index.html","id":"installing","dir":"","previous_headings":"","what":"Installing","title":"A Framework for Dimensionality Reduction","text":"Install latest development version Github: Install latest stable version CRAN: Load : Install dependencies:","code":"## install.packages(\"devtools\") devtools::install_github(\"gdkrmr/dimRed\") install.packages(\"dimRed\") library(dimRed) ## To install all dependencies: dimRed::installSuggests()"},{"path":"/index.html","id":"citing","dir":"","previous_headings":"","what":"Citing","title":"A Framework for Dimensionality Reduction","text":"corresponding publication can found , please cite use dimRed:","code":"@article{RJ-2018-039,   author = {Guido Kraemer and Markus Reichstein and Miguel D. Mahecha},   title = {{dimRed and coRanking---Unifying Dimensionality Reduction in R}},   year = {2018},   journal = {{The R Journal}},   url = {https://journal.r-project.org/archive/2018/RJ-2018-039/index.html},   pages = {342--358},   volume = {10},   number = {1} }"},{"path":"/reference/AUC_lnK_R_NX-dimRedResult-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method AUC_lnK_R_NX — AUC_lnK_R_NX,dimRedResult-method","title":"Method AUC_lnK_R_NX — AUC_lnK_R_NX,dimRedResult-method","text":"Calculate Area R_NX(ln K), used Lee et. al. (2015). Note despite name, weight mean logarithm, 1/K. explicit weighting logarithm desired use weight = \"log\" weight = \"log10\"","code":""},{"path":"/reference/AUC_lnK_R_NX-dimRedResult-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method AUC_lnK_R_NX — AUC_lnK_R_NX,dimRedResult-method","text":"","code":"# S4 method for dimRedResult AUC_lnK_R_NX(object, weight = \"inv\")"},{"path":"/reference/AUC_lnK_R_NX-dimRedResult-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method AUC_lnK_R_NX — AUC_lnK_R_NX,dimRedResult-method","text":"object class dimRedResult weight weight function used, one c(\"inv\", \"log\", \"log10\")","code":""},{"path":"/reference/AUC_lnK_R_NX-dimRedResult-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Method AUC_lnK_R_NX — AUC_lnK_R_NX,dimRedResult-method","text":"naming confusion originated equation 17 Lee et al (2015) name method may change future avoid confusion.","code":""},{"path":"/reference/AUC_lnK_R_NX-dimRedResult-method.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Method AUC_lnK_R_NX — AUC_lnK_R_NX,dimRedResult-method","text":"Lee, J.., Peluffo-Ordonez, D.H., Verleysen, M., 2015.   Multi-scale similarities stochastic neighbour embedding: Reducing   dimensionality preserving local global structure.   Neurocomputing 169, 246-261. https://doi.org/10.1016/j.neucom.2014.12.095","code":""},{"path":[]},{"path":"/reference/AutoEncoder-class.html","id":null,"dir":"Reference","previous_headings":"","what":"AutoEncoder — AutoEncoder-class","title":"AutoEncoder — AutoEncoder-class","text":"S4 Class implementing Autoencoder","code":""},{"path":"/reference/AutoEncoder-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"AutoEncoder — AutoEncoder-class","text":"Autoencoders neural networks try reproduce input. Consider method unstable, internals may still changed.","code":""},{"path":"/reference/AutoEncoder-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"AutoEncoder — AutoEncoder-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/AutoEncoder-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"AutoEncoder — AutoEncoder-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/AutoEncoder-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"AutoEncoder — AutoEncoder-class","text":"Autoencoder can take following parameters: ndim number dimensions reduction. n_hidden number neurons hidden       layers, length specifies number layers,       length must impair, middle number must       ndim. activation activation functions layers,       one \"tanh\", \"sigmoid\", \"relu\", \"elu\", everything       else silently ignored       activation function layer. weight_decay coefficient weight decay,       set 0 weight decay desired. learning_rate learning rate gradient descend graph Optional: list bits pieces define      autoencoder tensorflow, see details. keras_graph Optional: list keras layers define      encoder decoder, specifying , ignore      topology related variables, see details. batchsize NA, data used training,       else random subset size batchsize used n_steps number training steps.","code":""},{"path":"/reference/AutoEncoder-class.html","id":"details-1","dir":"Reference","previous_headings":"","what":"Details","title":"AutoEncoder — AutoEncoder-class","text":"several ways specify autoencoder, simplest pass number neurons per layer n_hidden, must vector integers impair length must symmetric middle number must equal ndim, every layer activation function can specified activation. regularization weight decay can specified setting weight_decay > 0. Currently gradient descent optimizer used, learning rate can specified setting learning_rate. learner can operate batches batchsize NA. number steps learner uses specified using n_steps.","code":""},{"path":"/reference/AutoEncoder-class.html","id":"further-training-a-model","dir":"Reference","previous_headings":"","what":"Further training a model","title":"AutoEncoder — AutoEncoder-class","text":"model converge first training phase training different data desired, dimRedResult object may passed autoencoder parameter; case topology related parameters ignored.","code":""},{"path":"/reference/AutoEncoder-class.html","id":"using-keras-layers","dir":"Reference","previous_headings":"","what":"Using Keras layers","title":"AutoEncoder — AutoEncoder-class","text":"encoder decoder part can specified using list keras layers. requires list two entries, encoder contain LIST keras layers WITHOUT layer_input concatenated order form encoder part. decoder defined accordingly, output decoder must number dimensions input data.","code":""},{"path":"/reference/AutoEncoder-class.html","id":"using-tensorflow","dir":"Reference","previous_headings":"","what":"Using Tensorflow","title":"AutoEncoder — AutoEncoder-class","text":"model can entirely defined tensorflow, must contain list following entries: encoder tensor defines encoder. decoder tensor defines decoder. network tensor defines reconstruction (encoder + decoder). loss tensor calculates loss (network + loss function). in_data placeholder points data input     network encoder. in_decoder placeholder points input     decoder. session tensorflow Session object holds     values tensors.","code":""},{"path":"/reference/AutoEncoder-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"AutoEncoder — AutoEncoder-class","text":"Uses tensorflow backend, details   problems relating tensorflow, see https://tensorflow.rstudio.com.","code":""},{"path":[]},{"path":"/reference/AutoEncoder-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AutoEncoder — AutoEncoder-class","text":"","code":"if (FALSE) { dat <- loadDataSet(\"3D S Curve\")  emb <- embed(dat, \"AutoEncoder\")  # predicting is possible: samp <- sample(floor(nrow(dat) / 10)) emb2 <- embed(dat[samp]) emb3 <- predict(emb2, dat[-samp])  plot(emb, type = \"2vars\") plot(emb2, type = \"2vars\") points(getData(emb3)) }"},{"path":"/reference/DRR-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimensionality Reduction via Regression — DRR-class","title":"Dimensionality Reduction via Regression — DRR-class","text":"S4 Class implementing Dimensionality Reduction via Regression (DRR).","code":""},{"path":"/reference/DRR-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dimensionality Reduction via Regression — DRR-class","text":"DRR non-linear extension PCA uses Kernel Ridge regression.","code":""},{"path":"/reference/DRR-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Dimensionality Reduction via Regression — DRR-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/DRR-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"Dimensionality Reduction via Regression — DRR-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/DRR-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Dimensionality Reduction via Regression — DRR-class","text":"DRR can take following parameters: ndim number dimensions lambda regularization parameter ridge   regression. kernel kernel use KRR, defaults   \"rbfdot\". kernel.pars list kernel parameters, elements depend   kernel used, \"rbfdot\" uses \"sigma\". pca logical, initial pca step performed,   defaults TRUE. pca.center logical, data centered   pca step. Defaults TRUE. pca.scale logical, data scaled   pca ste. Defaults FALSE. fastcv logical, fastCV   CVST package used instead normal cross-validation. fastcv.test fastcv = TRUE, separate test data set fastcv. cv.folds fastcv = FALSE, specifies number   folds crossvalidation. fastkrr.nblocks integer, higher values sacrifice numerical   accuracy speed less memory, see details. verbose logical, cross-validation results   printed .","code":""},{"path":"/reference/DRR-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Dimensionality Reduction via Regression — DRR-class","text":"Wraps around drr, see details. DRR non-linear extension principal components analysis using Kernel Ridge Regression (KRR, details see constructKRRLearner constructFastKRRLearner). Non-linear regression used explain variance PCA. DRR provides --sample extension backward projection. expensive computations matrix inversions therefore implementation profits lot multithreaded BLAS library. best parameters KRR determined cross-validaton parameter combinations lambda kernel.pars, using less parameter values speed computation time. Calculation KRR can accelerated increasing fastkrr.nblocks, smaller n^1/3 sacrificing accuracy, details see constructFastKRRLearner. Another way speed use pars$fastcv = TRUE might provide efficient way search parameter space may also miss global maximum, ran tests accuracy method.","code":""},{"path":"/reference/DRR-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Dimensionality Reduction via Regression — DRR-class","text":"Laparra, V., Malo, J., Camps-Valls, G.,     2015. Dimensionality Reduction via Regression Hyperspectral     Imagery. IEEE Journal Selected Topics Signal Processing     9, 1026-1036. doi:10.1109/JSTSP.2015.2417833","code":""},{"path":[]},{"path":"/reference/DRR-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dimensionality Reduction via Regression — DRR-class","text":"","code":"if (FALSE) { if(requireNamespace(c(\"kernlab\", \"DRR\"), quietly = TRUE)) {  dat <- loadDataSet(\"variable Noise Helix\", n = 200)[sample(200)]  emb <- embed(dat, \"DRR\", ndim = 3)  plot(dat, type = \"3vars\") plot(emb, type = \"3vars\")  # We even have function to reconstruct, also working for only the first few dimensions rec <- inverse(emb, getData(getDimRedData(emb))[, 1, drop = FALSE]) plot(rec, type = \"3vars\") }  }"},{"path":"/reference/DiffusionMaps-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Diffusion Maps — DiffusionMaps-class","title":"Diffusion Maps — DiffusionMaps-class","text":"S4 Class implementing Diffusion Maps","code":""},{"path":"/reference/DiffusionMaps-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Diffusion Maps — DiffusionMaps-class","text":"Diffusion Maps uses diffusion probability matrix robustly approximate manifold.","code":""},{"path":"/reference/DiffusionMaps-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Diffusion Maps — DiffusionMaps-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/DiffusionMaps-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"Diffusion Maps — DiffusionMaps-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/DiffusionMaps-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Diffusion Maps — DiffusionMaps-class","text":"Diffusion Maps can take following parameters: d function transforming matrix row wise     distance matrix dist object,     e.g. dist. ndim number dimensions eps epsilon parameter determines      diffusion weight matrix distance matrix d,      \\(exp(-d^2/eps)\\), set \"auto\"      set median distance 0.01*n nearest      neighbor. t Time-scale parameter. recommended value, 0,      uses multiscale geometry. delta Sparsity cut-symmetric graph Laplacian,     higher value results sparsity faster calculation.     predefined value 10^-5.","code":""},{"path":"/reference/DiffusionMaps-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Diffusion Maps — DiffusionMaps-class","text":"Wraps around diffuse, see details. uses notation Richards et al. (2009) slightly different one original paper (Coifman Lafon, 2006) \\(\\alpha\\) parameter. also --sample extension, see examples.","code":""},{"path":"/reference/DiffusionMaps-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Diffusion Maps — DiffusionMaps-class","text":"Richards, J.W., Freeman, P.E., Lee, .B., Schafer,     C.M., 2009. Exploiting Low-Dimensional Structure     Astronomical Spectra. ApJ 691,     32. doi:10.1088/0004-637X/691/1/32 Coifman, R.R., Lafon, S., 2006. Diffusion maps. Applied     Computational Harmonic Analysis 21,     5-30. doi:10.1016/j.acha.2006.04.006","code":""},{"path":[]},{"path":"/reference/DiffusionMaps-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diffusion Maps — DiffusionMaps-class","text":"","code":"if(requireNamespace(\"diffusionMap\", quietly = TRUE)) { dat <- loadDataSet(\"3D S Curve\", n = 300) emb <- embed(dat, \"DiffusionMaps\")  plot(emb, type = \"2vars\")  # predicting is possible: samp <- sample(floor(nrow(dat) / 10)) emb2 <- embed(dat[samp]) emb3 <- predict(emb2, dat[-samp])  plot(emb2, type = \"2vars\") points(getData(emb3)) } #> Performing eigendecomposition #> Computing Diffusion Coordinates #> Elapsed time: 0.036 seconds"},{"path":"/reference/DrL-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Distributed Recursive Graph Layout — DrL-class","title":"Distributed Recursive Graph Layout — DrL-class","text":"S4 Class implementing Distributed recursive Graph Layout.","code":""},{"path":"/reference/DrL-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Distributed Recursive Graph Layout — DrL-class","text":"DrL uses complex algorithm avoid local minima graph embedding uses several steps.","code":""},{"path":"/reference/DrL-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Distributed Recursive Graph Layout — DrL-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/DrL-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"Distributed Recursive Graph Layout — DrL-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/DrL-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Distributed Recursive Graph Layout — DrL-class","text":"DrL can take following parameters: ndim number dimensions, defaults 2. Can 2 3 knn Reduce graph keep neares neighbors. Defaults 100. d distance function determine weights graph edges. Defaults euclidean distances.","code":""},{"path":"/reference/DrL-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Distributed Recursive Graph Layout — DrL-class","text":"Wraps around layout_with_drl. parameters maxiter, epsilon kkconst set default values set, may change future release. DimRed Package adds extra sparsity parameter constructing knn graph also may improve visualization quality.","code":""},{"path":"/reference/DrL-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Distributed Recursive Graph Layout — DrL-class","text":"Martin, S., Brown, W.M., Wylie, B.N., 2007. Dr.l: Distributed Recursive (graph) Layout (. dRl; 002182MLTPL00). Sandia National Laboratories.","code":""},{"path":[]},{"path":"/reference/DrL-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Distributed Recursive Graph Layout — DrL-class","text":"","code":"if (FALSE) { if(requireNamespace(c(\"igraph\", \"coRanking\"), quietly = TRUE)) {  dat <- loadDataSet(\"Swiss Roll\", n = 200) emb <- embed(dat, \"DrL\") plot(emb, type = \"2vars\") }  }"},{"path":"/reference/FastICA-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Independent Component Analysis — FastICA-class","title":"Independent Component Analysis — FastICA-class","text":"S4 Class implementing FastICA algorithm Indepentend Component Analysis.","code":""},{"path":"/reference/FastICA-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Independent Component Analysis — FastICA-class","text":"ICA used blind signal separation different sources. linear Projection.","code":""},{"path":"/reference/FastICA-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Independent Component Analysis — FastICA-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/FastICA-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"Independent Component Analysis — FastICA-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/FastICA-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Independent Component Analysis — FastICA-class","text":"FastICA can take following parameters: ndim number output dimensions. Defaults 2","code":""},{"path":"/reference/FastICA-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Independent Component Analysis — FastICA-class","text":"Wraps around fastICA. FastICA uses fast approximation negentropy estimate statistical independences signals. simple rotation/projection, forward backward functions can given.","code":""},{"path":"/reference/FastICA-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Independent Component Analysis — FastICA-class","text":"Hyvarinen, ., 1999. Fast robust fixed-point algorithms independent component analysis. IEEE Transactions Neural Networks 10, 626-634. https://doi.org/10.1109/72.761722","code":""},{"path":[]},{"path":"/reference/FastICA-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Independent Component Analysis — FastICA-class","text":"","code":"if(requireNamespace(\"fastICA\", quietly = TRUE)) {  dat <- loadDataSet(\"3D S Curve\") emb <- embed(dat, \"FastICA\", ndim = 2) plot(getData(getDimRedData(emb)))  }"},{"path":"/reference/FruchtermanReingold-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Fruchterman Reingold Graph Layout — FruchtermanReingold-class","title":"Fruchterman Reingold Graph Layout — FruchtermanReingold-class","text":"S4 Class implementing Fruchterman Reingold Graph Layout algorithm.","code":""},{"path":"/reference/FruchtermanReingold-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Fruchterman Reingold Graph Layout — FruchtermanReingold-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/FruchtermanReingold-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"Fruchterman Reingold Graph Layout — FruchtermanReingold-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/FruchtermanReingold-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Fruchterman Reingold Graph Layout — FruchtermanReingold-class","text":"ndim number dimensions, defaults 2. Can 2 3 knn Reduce graph keep neares neighbors. Defaults 100. d distance function determine weights graph edges. Defaults euclidean distances.","code":""},{"path":"/reference/FruchtermanReingold-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Fruchterman Reingold Graph Layout — FruchtermanReingold-class","text":"Wraps around layout_with_fr, see details. Fruchterman Reingold algorithm puts data circle puts connected points close .","code":""},{"path":"/reference/FruchtermanReingold-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fruchterman Reingold Graph Layout — FruchtermanReingold-class","text":"Fruchterman, T.M.J., Reingold, E.M., 1991. Graph drawing force-directed placement. Softw: Pract. Exper. 21, 1129-1164. https://doi.org/10.1002/spe.4380211102","code":""},{"path":[]},{"path":"/reference/FruchtermanReingold-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fruchterman Reingold Graph Layout — FruchtermanReingold-class","text":"","code":"if(requireNamespace(c(\"igraph\", \"coRanking\"), quietly = TRUE)) {  dat <- loadDataSet(\"Swiss Roll\", n = 100) emb <- embed(dat, \"FruchtermanReingold\") plot(emb, type = \"2vars\")  }"},{"path":"/reference/HLLE-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Hessian Locally Linear Embedding — HLLE-class","title":"Hessian Locally Linear Embedding — HLLE-class","text":"S4 Class implementing Hessian Locally Linear Embedding (HLLE)","code":""},{"path":"/reference/HLLE-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hessian Locally Linear Embedding — HLLE-class","text":"HLLE uses local hessians approximate curvines extension non-convex subsets lowdimensional space.","code":""},{"path":"/reference/HLLE-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Hessian Locally Linear Embedding — HLLE-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/HLLE-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"Hessian Locally Linear Embedding — HLLE-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/HLLE-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Hessian Locally Linear Embedding — HLLE-class","text":"HLLE can take following parameters: knn neighborhood size ndim number output dimensions","code":""},{"path":"/reference/HLLE-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Hessian Locally Linear Embedding — HLLE-class","text":"implementation, sticks algorithm Donoho Grimes (2003). Makes use sparsity speed final embedding.","code":""},{"path":"/reference/HLLE-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hessian Locally Linear Embedding — HLLE-class","text":"Donoho, D.L., Grimes, C., 2003. Hessian eigenmaps: Locally linear embedding techniques high-dimensional data. PNAS 100, 5591-5596. doi:10.1073/pnas.1031596100","code":""},{"path":[]},{"path":"/reference/HLLE-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hessian Locally Linear Embedding — HLLE-class","text":"","code":"if(requireNamespace(c(\"RSpectra\", \"Matrix\", \"RANN\"), quietly = TRUE)) {  dat <- loadDataSet(\"3D S Curve\", n = 300) emb <- embed(dat, \"HLLE\", knn = 15) plot(emb, type = \"2vars\")  } #> 2023-03-21 13:05:24: Finding nearest neighbors #> 2023-03-21 13:05:24: Calculating Hessian #> 1/300 2/300 3/300 4/300 5/300 6/300 7/300 8/300 9/300 10/300 11/300 12/300 13/300 14/300 15/300 16/300 17/300 18/300 19/300 20/300 21/300 22/300 23/300 24/300 25/300 26/300 27/300 28/300 29/300 30/300 31/300 32/300 33/300 34/300 35/300 36/300 37/300 38/300 39/300 40/300 41/300 42/300 43/300 44/300 45/300 46/300 47/300 48/300 49/300 50/300 51/300 52/300 53/300 54/300 55/300 56/300 57/300 58/300 59/300 60/300 61/300 62/300 63/300 64/300 65/300 66/300 67/300 68/300 69/300 70/300 71/300 72/300 73/300 74/300 75/300 76/300 77/300 78/300 79/300 80/300 81/300 82/300 83/300 84/300 85/300 86/300 87/300 88/300 89/300 90/300 91/300 92/300 93/300 94/300 95/300 96/300 97/300 98/300 99/300 100/300 101/300 102/300 103/300 104/300 105/300 106/300 107/300 108/300 109/300 110/300 111/300 112/300 113/300 114/300 115/300 116/300 117/300 118/300 119/300 120/300 121/300 122/300 123/300 124/300 125/300 126/300 127/300 128/300 129/300 130/300 131/300 132/300 133/300 134/300 135/300 136/300 137/300 138/300 139/300 140/300 141/300 142/300 143/300 144/300 145/300 146/300 147/300 148/300 149/300 150/300 151/300 152/300 153/300 154/300 155/300 156/300 157/300 158/300 159/300 160/300 161/300 162/300 163/300 164/300 165/300 166/300 167/300 168/300 169/300 170/300 171/300 172/300 173/300 174/300 175/300 176/300 177/300 178/300 179/300 180/300 181/300 182/300 183/300 184/300 185/300 186/300 187/300 188/300 189/300 190/300 191/300 192/300 193/300 194/300 195/300 196/300 197/300 198/300 199/300 200/300 201/300 202/300 203/300 204/300 205/300 206/300 207/300 208/300 209/300 210/300 211/300 212/300 213/300 214/300 215/300 216/300 217/300 218/300 219/300 220/300 221/300 222/300 223/300 224/300 225/300 226/300 227/300 228/300 229/300 230/300 231/300 232/300 233/300 234/300 235/300 236/300 237/300 238/300 239/300 240/300 241/300 242/300 243/300 244/300 245/300 246/300 247/300 248/300 249/300 250/300 251/300 252/300 253/300 254/300 255/300 256/300 257/300 258/300 259/300 260/300 261/300 262/300 263/300 264/300 265/300 266/300 267/300 268/300 269/300 270/300 271/300 272/300 273/300 274/300 275/300 276/300 277/300 278/300 279/300 280/300 281/300 282/300 283/300 284/300 285/300 286/300 287/300 288/300 289/300 290/300 291/300 292/300 293/300 294/300 295/300 296/300 297/300 298/300 299/300 300/300 #> as(<dsCMatrix>, \"dgCMatrix\") is deprecated since Matrix 1.5-0; do as(., \"generalMatrix\") instead #> 2023-03-21 13:05:24: Embedding #> Eigenvalues:  5.515692e-04  4.675215e-05 -5.137594e-17 #> 2023-03-21 13:05:24: DONE"},{"path":"/reference/Isomap-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Isomap embedding — Isomap-class","title":"Isomap embedding — Isomap-class","text":"S4 Class implementing Isomap Algorithm","code":""},{"path":"/reference/Isomap-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Isomap embedding — Isomap-class","text":"Isomap algorithm approximates manifold using geodesic distances k nearest neighbor graph. classical scaling performed resulting distance matrix.","code":""},{"path":"/reference/Isomap-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Isomap embedding — Isomap-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/Isomap-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"Isomap embedding — Isomap-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/Isomap-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Isomap embedding — Isomap-class","text":"Isomap can take following parameters: knn number nearest neighbors graph. Defaults 50. ndim number embedding dimensions, defaults 2. get_geod geodesic distance matrix kept,                   TRUE, access getOtherData(x)$geod","code":""},{"path":"/reference/Isomap-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Isomap embedding — Isomap-class","text":"dimRed package uses implementation Isomap also comes sample extension (known landmark Isomap). default Isomap algorithm scales computationally well, implementation uses nn2 faster search nearest neighbors.  data large may useful fit subsample data use --sample extension points.","code":""},{"path":"/reference/Isomap-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Isomap embedding — Isomap-class","text":"Tenenbaum, J.B., Silva, V. de, Langford, J.C., 2000. Global Geometric Framework Nonlinear Dimensionality Reduction. Science 290, 2319-2323. https://doi.org/10.1126/science.290.5500.2319","code":""},{"path":[]},{"path":"/reference/Isomap-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Isomap embedding — Isomap-class","text":"","code":"if(requireNamespace(c(\"RSpectra\", \"igraph\", \"RANN\"), quietly = TRUE)) {  dat <- loadDataSet(\"3D S Curve\", n = 500) emb <- embed(dat, \"Isomap\", knn = 10) plot(emb)  ## or simpler, use embed(): samp <- sample(nrow(dat), size = 200) emb2 <- embed(dat[samp], \"Isomap\", .mute = NULL, knn = 10) emb3 <- predict(emb2, dat[-samp])  plot(emb2, type = \"2vars\") plot(emb3, type = \"2vars\")  } #> 2023-03-21 13:05:24: Isomap START #> 2023-03-21 13:05:24: constructing knn graph #> 2023-03-21 13:05:24: calculating geodesic distances #> 2023-03-21 13:05:24: Classical Scaling #> 2023-03-21 13:05:24: Isomap START #> 2023-03-21 13:05:24: constructing knn graph #> 2023-03-21 13:05:24: calculating geodesic distances #> 2023-03-21 13:05:24: Classical Scaling #> 2023-03-21 13:05:24: L-Isomap embed START #> 2023-03-21 13:05:24: constructing knn graph #> 2023-03-21 13:05:24: calculating geodesic distances #> 2023-03-21 13:05:24: embedding #> 2023-03-21 13:05:24: DONE"},{"path":"/reference/KamadaKawai-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Graph Embedding via the Kamada Kawai Algorithm — KamadaKawai-class","title":"Graph Embedding via the Kamada Kawai Algorithm — KamadaKawai-class","text":"S4 Class implementing Kamada Kawai Algorithm graph embedding.","code":""},{"path":"/reference/KamadaKawai-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graph Embedding via the Kamada Kawai Algorithm — KamadaKawai-class","text":"Graph embedding algorithms se data graph. nodes graph exist attracting repelling forces can modeled electrical fields springs connecting nodes. graph forced lower dimensional representation tries represent forces betweent nodes accurately minimizing total energy attracting repelling forces.","code":""},{"path":"/reference/KamadaKawai-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Graph Embedding via the Kamada Kawai Algorithm — KamadaKawai-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/KamadaKawai-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"Graph Embedding via the Kamada Kawai Algorithm — KamadaKawai-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/KamadaKawai-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Graph Embedding via the Kamada Kawai Algorithm — KamadaKawai-class","text":"KamadaKawai can take following parameters: ndim number dimensions, defaults 2. Can 2 3 knn Reduce graph keep neares neighbors. Defaults 100. d distance function determine weights graph edges. Defaults euclidean distances.","code":""},{"path":"/reference/KamadaKawai-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Graph Embedding via the Kamada Kawai Algorithm — KamadaKawai-class","text":"Wraps around layout_with_kk. parameters maxiter, epsilon kkconst set default values set, may change future release. DimRed Package adds extra sparsity parameter constructing knn graph also may improve visualization quality.","code":""},{"path":"/reference/KamadaKawai-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Graph Embedding via the Kamada Kawai Algorithm — KamadaKawai-class","text":"Kamada, T., Kawai, S., 1989. algorithm drawing general undirected graphs. Information Processing Letters 31, 7-15. https://doi.org/10.1016/0020-0190(89)90102-6","code":""},{"path":[]},{"path":"/reference/KamadaKawai-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Graph Embedding via the Kamada Kawai Algorithm — KamadaKawai-class","text":"","code":"if(requireNamespace(c(\"igraph\", \"coRanking\"), quietly = TRUE)) {  dat <- loadDataSet(\"Swiss Roll\", n = 200) emb <- embed(dat, \"KamadaKawai\") plot(emb, type = \"2vars\")  }"},{"path":"/reference/LCMC-dimRedResult-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method LCMC — LCMC,dimRedResult-method","title":"Method LCMC — LCMC,dimRedResult-method","text":"Calculates Local Continuity Meta Criterion, Q_NX adjusted random overlap inside K-ary neighborhood.","code":""},{"path":"/reference/LCMC-dimRedResult-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method LCMC — LCMC,dimRedResult-method","text":"","code":"# S4 method for dimRedResult LCMC(object)"},{"path":"/reference/LCMC-dimRedResult-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method LCMC — LCMC,dimRedResult-method","text":"object class dimRedResult","code":""},{"path":[]},{"path":"/reference/LaplacianEigenmaps-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Laplacian Eigenmaps — LaplacianEigenmaps-class","title":"Laplacian Eigenmaps — LaplacianEigenmaps-class","text":"S4 Class implementing Laplacian Eigenmaps","code":""},{"path":"/reference/LaplacianEigenmaps-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Laplacian Eigenmaps — LaplacianEigenmaps-class","text":"Laplacian Eigenmaps use kernel originally developed separate non-convex clusters name spectral clustering.","code":""},{"path":"/reference/LaplacianEigenmaps-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Laplacian Eigenmaps — LaplacianEigenmaps-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/LaplacianEigenmaps-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"Laplacian Eigenmaps — LaplacianEigenmaps-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/LaplacianEigenmaps-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Laplacian Eigenmaps — LaplacianEigenmaps-class","text":"LaplacianEigenmaps can take following parameters: ndim number output dimensions. sparse character vector specifying hot make graph    sparse, \"knn\" means K-nearest neighbor graph    constructed, \"eps\" epsilon neighborhood graph    constructed, else dense distance matrix used. knn number nearest neighbors use knn graph. eps distance epsilon neighborhood graph. t Parameter transformation distance matrix   \\(w=exp(-d^2/t)\\), larger values give less weight   differences distance, t == Inf treats distances != 0 equally. norm logical, normed laplacian used?","code":""},{"path":"/reference/LaplacianEigenmaps-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Laplacian Eigenmaps — LaplacianEigenmaps-class","text":"Wraps around spec.emb.","code":""},{"path":"/reference/LaplacianEigenmaps-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Laplacian Eigenmaps — LaplacianEigenmaps-class","text":"Belkin, M., Niyogi, P., 2003. Laplacian Eigenmaps Dimensionality Reduction Data Representation. Neural Computation 15, 1373.","code":""},{"path":"/reference/LaplacianEigenmaps-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Laplacian Eigenmaps — LaplacianEigenmaps-class","text":"","code":"if(requireNamespace(c(\"loe\", \"RSpectra\", \"Matrix\"), quietly = TRUE)) {  dat <- loadDataSet(\"3D S Curve\") emb <- embed(dat, \"LaplacianEigenmaps\") plot(emb@data@data)  } #> 2023-03-21 13:05:26: Creating weight matrix #> 2023-03-21 13:05:26: Eigenvalue decomposition #> Eigenvalues:  1.039229e-02  2.605511e-03 -4.539080e-17 #> 2023-03-21 13:05:26: DONE"},{"path":"/reference/MDS-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Metric Dimensional Scaling — MDS-class","title":"Metric Dimensional Scaling — MDS-class","text":"S4 Class implementing classical scaling (MDS).","code":""},{"path":"/reference/MDS-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Metric Dimensional Scaling — MDS-class","text":"MDS tries maintain distances high- low-dimensional space, advantage PCA arbitrary distance functions can used, computationally demanding.","code":""},{"path":"/reference/MDS-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Metric Dimensional Scaling — MDS-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/MDS-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"Metric Dimensional Scaling — MDS-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/MDS-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Metric Dimensional Scaling — MDS-class","text":"MDS can take following parameters: ndim number dimensions. d function calculate distance matrix input coordinates, defaults euclidean distances.","code":""},{"path":"/reference/MDS-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Metric Dimensional Scaling — MDS-class","text":"Wraps around cmdscale. implementation also provides --sample extension completely optimized yet.","code":""},{"path":"/reference/MDS-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Metric Dimensional Scaling — MDS-class","text":"Torgerson, W.S., 1952. Multidimensional scaling: . Theory method. Psychometrika 17, 401-419. https://doi.org/10.1007/BF02288916","code":""},{"path":[]},{"path":"/reference/MDS-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metric Dimensional Scaling — MDS-class","text":"","code":"if (FALSE) { dat <- loadDataSet(\"3D S Curve\") emb <- embed(dat, \"MDS\") plot(emb, type = \"2vars\")  # a \"manual\" kPCA: emb2 <- embed(dat, \"MDS\", d = function(x) exp(stats::dist(x))) plot(emb2, type = \"2vars\")  # a \"manual\", more customizable, and slower Isomap: emb3 <- embed(dat, \"MDS\", d = function(x) vegan::isomapdist(vegan::vegdist(x, \"manhattan\"), k = 20)) plot(emb3)  }"},{"path":"/reference/NNMF-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-Negative Matrix Factorization — NNMF-class","title":"Non-Negative Matrix Factorization — NNMF-class","text":"S4 Class implementing NNMF.","code":""},{"path":"/reference/NNMF-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Non-Negative Matrix Factorization — NNMF-class","text":"NNMF method decomposing matrix smaller  dimension constraint data ( projection) negative taken account.","code":""},{"path":"/reference/NNMF-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Non-Negative Matrix Factorization — NNMF-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/NNMF-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"Non-Negative Matrix Factorization — NNMF-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/NNMF-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Non-Negative Matrix Factorization — NNMF-class","text":"method can take following parameters: ndim number output dimensions. method character, algorithm used. See    nmf possible values. Defaults    \"brunet\" nrun integer, number times computations    conducted. See nmf seed integer, value control random numbers used. options named list, options pass  nmf","code":""},{"path":"/reference/NNMF-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Non-Negative Matrix Factorization — NNMF-class","text":"Wraps around nmf. Note estimation uses random  numbers. create reproducible results, set random number seed  function call. Also, many cases, computations conducted  parallel using multiple cores. disable , use option  .pbackend = NULL.","code":""},{"path":"/reference/NNMF-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Non-Negative Matrix Factorization — NNMF-class","text":"Lee, D.D., Seung, H.S., 1999. Learning parts objects non-negative matrix factorization. Nature 401, 788-791. https://doi.org/10.1038/44565","code":""},{"path":[]},{"path":"/reference/NNMF-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non-Negative Matrix Factorization — NNMF-class","text":"","code":"if(requireNamespace(c(\"NNMF\", \"MASS\"), quietly = TRUE)) {  set.seed(4646) dat <- loadDataSet(\"Iris\") emb <- embed(dat, \"NNMF\")  plot(emb)  # project new values: nn_proj <- predict(emb, dat[1:7]) plot(nn_proj)  }"},{"path":"/reference/PCA-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal Component Analysis — PCA-class","title":"Principal Component Analysis — PCA-class","text":"S4 Class implementing PCA.","code":""},{"path":"/reference/PCA-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Principal Component Analysis — PCA-class","text":"PCA transforms data orthogonal components first axis accounts larges variance data, following axes account highest variance constraint orthogonal preceding axes.  PCA sensitive scaling variables. PCA far fastest simples method dimensionality reduction probably always applied baseline methods tested.","code":""},{"path":"/reference/PCA-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Principal Component Analysis — PCA-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/PCA-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"Principal Component Analysis — PCA-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/PCA-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Principal Component Analysis — PCA-class","text":"PCA can take following parameters: ndim number output dimensions. center logical, data centered, defaults TRUE. scale. logical, data scaled, defaults FALSE.","code":""},{"path":"/reference/PCA-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Principal Component Analysis — PCA-class","text":"Wraps around prcomp. PCA can reduced simple rotation, forward backward projection functions supplied.","code":""},{"path":"/reference/PCA-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Principal Component Analysis — PCA-class","text":"Pearson, K., 1901. lines planes closest fit systems points space. Philosophical Magazine 2, 559-572.","code":""},{"path":[]},{"path":"/reference/PCA-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principal Component Analysis — PCA-class","text":"","code":"dat <- loadDataSet(\"Iris\") emb <- embed(dat, \"PCA\")  plot(emb, type = \"2vars\")  if(requireNamespace(\"scatterplot3d\", quietly = TRUE))   plot(inverse(emb, getDimRedData(emb)), type = \"3vars\")"},{"path":"/reference/PCA_L1-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Principal Component Analysis with L1 error. — PCA_L1-class","title":"Principal Component Analysis with L1 error. — PCA_L1-class","text":"S4 Class implementing PCA L1 error.","code":""},{"path":"/reference/PCA_L1-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Principal Component Analysis with L1 error. — PCA_L1-class","text":"PCA transforms data L2 reconstruction error minimized variance projected data maximized. sensitive outliers, L1 PCA minimizes L1 reconstruction error maximizes sum L1 norm projected observations.","code":""},{"path":"/reference/PCA_L1-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Principal Component Analysis with L1 error. — PCA_L1-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/PCA_L1-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"Principal Component Analysis with L1 error. — PCA_L1-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/PCA_L1-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Principal Component Analysis with L1 error. — PCA_L1-class","text":"PCA can take following parameters: ndim number output dimensions. center logical, data centered, defaults TRUE. scale. logical, data scaled, defaults FALSE. fun character function, method apply, see pcaL1 package ... parameters fun","code":""},{"path":"/reference/PCA_L1-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Principal Component Analysis with L1 error. — PCA_L1-class","text":"Wraps around different methods pcaL1 package. PCA can reduced simple rotation, forward backward projection functions supplied.","code":""},{"path":"/reference/PCA_L1-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Principal Component Analysis with L1 error. — PCA_L1-class","text":"Park, Y.W., Klabjan, D., 2016. Iteratively Reweighted Least Squares Algorithms L1-Norm Principal Component Analysis, : Data Mining (ICDM), 2016 IEEE 16th International Conference . IEEE, pp. 430-438.","code":""},{"path":[]},{"path":"/reference/PCA_L1-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Principal Component Analysis with L1 error. — PCA_L1-class","text":"","code":"if(requireNamespace(\"pcaL1\", quietly = TRUE)) {  dat <- loadDataSet(\"Iris\") emb <- embed(dat, \"PCA_L1\")  plot(emb, type = \"2vars\") plot(inverse(emb, getData(getDimRedData((emb)))), type = \"3vars\")  }"},{"path":"/reference/Q_NX-dimRedResult-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method Q_NX — Q_NX,dimRedResult-method","title":"Method Q_NX — Q_NX,dimRedResult-method","text":"Calculate Q_NX score (Chen & Buja 2006, notation publication M_k). fraction points remain inside K-ary neighborhood high low dimensional space.","code":""},{"path":"/reference/Q_NX-dimRedResult-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method Q_NX — Q_NX,dimRedResult-method","text":"","code":"# S4 method for dimRedResult Q_NX(object)"},{"path":"/reference/Q_NX-dimRedResult-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method Q_NX — Q_NX,dimRedResult-method","text":"object class dimRedResult","code":""},{"path":[]},{"path":"/reference/Q_global-dimRedResult-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method Q_global — Q_global,dimRedResult-method","title":"Method Q_global — Q_global,dimRedResult-method","text":"Calculate Q_global score assess quality dimensionality reduction.","code":""},{"path":"/reference/Q_global-dimRedResult-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method Q_global — Q_global,dimRedResult-method","text":"","code":"# S4 method for dimRedResult Q_global(object)"},{"path":"/reference/Q_global-dimRedResult-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method Q_global — Q_global,dimRedResult-method","text":"object class dimRedResult","code":""},{"path":[]},{"path":"/reference/Q_local-dimRedResult-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method Q_local — Q_local,dimRedResult-method","title":"Method Q_local — Q_local,dimRedResult-method","text":"Calculate Q_local score assess quality dimensionality reduction.","code":""},{"path":"/reference/Q_local-dimRedResult-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method Q_local — Q_local,dimRedResult-method","text":"","code":"# S4 method for dimRedResult Q_local(object, ndim = getNDim(object))"},{"path":"/reference/Q_local-dimRedResult-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method Q_local — Q_local,dimRedResult-method","text":"object class dimRedResult. ndim use first ndim columns embedded data calculation.","code":""},{"path":[]},{"path":"/reference/R_NX-dimRedResult-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method R_NX — R_NX,dimRedResult-method","title":"Method R_NX — R_NX,dimRedResult-method","text":"Calculate R_NX score Lee et. al. (2013) shows neighborhood preservation Kth nearest neighbors, corrected random point distributions scaled range [0, 1].","code":""},{"path":"/reference/R_NX-dimRedResult-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method R_NX — R_NX,dimRedResult-method","text":"","code":"# S4 method for dimRedResult R_NX(object, ndim = getNDim(object))"},{"path":"/reference/R_NX-dimRedResult-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method R_NX — R_NX,dimRedResult-method","text":"object class dimRedResult ndim number dimensions take embedded data.","code":""},{"path":[]},{"path":"/reference/UMAP-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Umap embedding — UMAP-class","title":"Umap embedding — UMAP-class","text":"S4 Class implementing UMAP algorithm","code":""},{"path":"/reference/UMAP-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Umap embedding — UMAP-class","text":"Uniform Manifold Approximation gradient descend based algorithm gives results similar t-SNE, scales better number points.","code":""},{"path":"/reference/UMAP-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Umap embedding — UMAP-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/UMAP-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"Umap embedding — UMAP-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/UMAP-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Umap embedding — UMAP-class","text":"UMAP can take follwing parameters: ndim number embedding dimensions. knn number neighbors used. d distance metric use. method \"naive\" R implementation, \"python\"     reference implementation. method parameters can also passed, see umap.defaults details. ones standardized use dimRed get automatically translated umap.","code":""},{"path":"/reference/UMAP-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Umap embedding — UMAP-class","text":"dimRed package wraps umap packages provides implementation pure R also wrapper around original python package umap-learn (https://github.com/lmcinnes/umap/). requires umap-learn version 0.4 installed, time writing, already umap-learn 0.5 supported R package umap. \"naive\" implementation pure R implementation considered experimental point writing , also much slower python implementation. \"python\" implementation reference implementation used McInees et. al. (2018). requires reticulate package interaction python python package umap-learn installed (use pip install umap-learn).","code":""},{"path":"/reference/UMAP-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Umap embedding — UMAP-class","text":"McInnes, Leland, John Healy. \"UMAP: Uniform Manifold Approximation Projection Dimension Reduction.\" https://arxiv.org/abs/1802.03426","code":""},{"path":[]},{"path":"/reference/UMAP-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Umap embedding — UMAP-class","text":"","code":"if (FALSE) { dat <- loadDataSet(\"3D S Curve\", n = 300) emb <- embed(dat, \"UMAP\", .mute = NULL, knn = 10) plot(emb, type = \"2vars\") }"},{"path":"/reference/as.data.frame.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts to data.frame — as.data.frame","title":"Converts to data.frame — as.data.frame","text":"General conversions objects created dimRed data.frame. See class documentations details (dimRedData, dimRedResult). documentation function base package, see : .data.frame.default.","code":""},{"path":"/reference/as.data.frame.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts to data.frame — as.data.frame","text":"","code":"as.data.frame(x, row.names, optional, ...)"},{"path":"/reference/as.data.frame.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts to data.frame — as.data.frame","text":"x object converted row.names unused dimRed optional unused dimRed ... arguments.","code":""},{"path":"/reference/as.dimRedData.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts to dimRedData — as.dimRedData","title":"Converts to dimRedData — as.dimRedData","text":"Conversion functions dimRedData.","code":""},{"path":"/reference/as.dimRedData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts to dimRedData — as.dimRedData","text":"","code":"as.dimRedData(formula, ...)  # S4 method for formula as.dimRedData(formula, data)"},{"path":"/reference/as.dimRedData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts to dimRedData — as.dimRedData","text":"formula formula, left hand side assigned meta slot right hand side assigned data slot. ... arguments. data coerced data.frame .data.frame","code":""},{"path":"/reference/as.dimRedData.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Converts to dimRedData — as.dimRedData","text":".dimRedData(formula): Convert data.frame dimRedData object using formula","code":""},{"path":[]},{"path":"/reference/as.dimRedData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts to dimRedData — as.dimRedData","text":"","code":"## create a dimRedData object using a formula as.dimRedData(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,               iris)[1:5] #> An object of class \"dimRedData\" #> Slot \"data\": #>   Sepal.Length Sepal.Width Petal.Length Petal.Width #> 1          5.1         3.5          1.4         0.2 #> 2          4.9         3.0          1.4         0.2 #> 3          4.7         3.2          1.3         0.2 #> 4          4.6         3.1          1.5         0.2 #> 5          5.0         3.6          1.4         0.2 #>  #> Slot \"meta\": #>   Species #> 1  setosa #> 2  setosa #> 3  setosa #> 4  setosa #> 5  setosa #>"},{"path":"/reference/cophenetic_correlation-dimRedResult-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method cophenetic_correlation — cophenetic_correlation,dimRedResult-method","title":"Method cophenetic_correlation — cophenetic_correlation,dimRedResult-method","text":"Calculate correlation distance matrices high low dimensioal space.","code":""},{"path":"/reference/cophenetic_correlation-dimRedResult-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method cophenetic_correlation — cophenetic_correlation,dimRedResult-method","text":"","code":"# S4 method for dimRedResult cophenetic_correlation(object, d = stats::dist, cor_method = \"pearson\")"},{"path":"/reference/cophenetic_correlation-dimRedResult-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method cophenetic_correlation — cophenetic_correlation,dimRedResult-method","text":"object class dimRedResult d distance function use. cor_method correlation method.","code":""},{"path":[]},{"path":"/reference/dataSets.html","id":null,"dir":"Reference","previous_headings":"","what":"Example Data Sets for dimensionality reduction — dataSets","title":"Example Data Sets for dimensionality reduction — dataSets","text":"compilation standard data sets often used showcase dimensionality reduction techniques.","code":""},{"path":"/reference/dataSets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example Data Sets for dimensionality reduction — dataSets","text":"","code":"loadDataSet(name = dataSetList(), n = 2000, sigma = 0.05)  dataSetList()"},{"path":"/reference/dataSets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example Data Sets for dimensionality reduction — dataSets","text":"name character vector specifies name data set. n generated data sets number points generated, else ignored. sigma generated data sets standard deviation noise added, else ignored.","code":""},{"path":"/reference/dataSets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example Data Sets for dimensionality reduction — dataSets","text":"loadDataSet object class  dimRedData. dataSetList() return     character string implemented data sets","code":""},{"path":"/reference/dataSets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example Data Sets for dimensionality reduction — dataSets","text":"argument name one dataSetList(). Partial matching possible, see match.arg. Generated data sets contain internal coordinates manifold meta slot.  Call dataSetList() see data sets available.","code":""},{"path":"/reference/dataSets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example Data Sets for dimensionality reduction — dataSets","text":"","code":"## a list of available data sets: dataSetList() #>  [1] \"Swiss Roll\"           \"Broken Swiss Roll\"    \"Helix\"                #>  [4] \"Twin Peaks\"           \"Sphere\"               \"Ball\"                 #>  [7] \"FishBowl\"             \"3D S Curve\"           \"variable Noise Helix\" #> [10] \"Iris\"                 \"Cube\"                  ## Load a data set: swissRoll <- loadDataSet(\"Swiss Roll\") # \\donttest{ if(requireNamespace(\"scatterplot3d\", quietly = TRUE))   plot(swissRoll, type = \"3vars\")  # }  ## Load Iris data set, partial matching: loadDataSet(\"I\") #> An object of class \"dimRedData\" #> Slot \"data\": #>        Sepal.Length Sepal.Width Petal.Length Petal.Width #>   [1,]          5.1         3.5          1.4         0.2 #>   [2,]          4.9         3.0          1.4         0.2 #>   [3,]          4.7         3.2          1.3         0.2 #>   [4,]          4.6         3.1          1.5         0.2 #>   [5,]          5.0         3.6          1.4         0.2 #>   [6,]          5.4         3.9          1.7         0.4 #>   [7,]          4.6         3.4          1.4         0.3 #>   [8,]          5.0         3.4          1.5         0.2 #>   [9,]          4.4         2.9          1.4         0.2 #>  [10,]          4.9         3.1          1.5         0.1 #>  [11,]          5.4         3.7          1.5         0.2 #>  [12,]          4.8         3.4          1.6         0.2 #>  [13,]          4.8         3.0          1.4         0.1 #>  [14,]          4.3         3.0          1.1         0.1 #>  [15,]          5.8         4.0          1.2         0.2 #>  [16,]          5.7         4.4          1.5         0.4 #>  [17,]          5.4         3.9          1.3         0.4 #>  [18,]          5.1         3.5          1.4         0.3 #>  [19,]          5.7         3.8          1.7         0.3 #>  [20,]          5.1         3.8          1.5         0.3 #>  [21,]          5.4         3.4          1.7         0.2 #>  [22,]          5.1         3.7          1.5         0.4 #>  [23,]          4.6         3.6          1.0         0.2 #>  [24,]          5.1         3.3          1.7         0.5 #>  [25,]          4.8         3.4          1.9         0.2 #>  [26,]          5.0         3.0          1.6         0.2 #>  [27,]          5.0         3.4          1.6         0.4 #>  [28,]          5.2         3.5          1.5         0.2 #>  [29,]          5.2         3.4          1.4         0.2 #>  [30,]          4.7         3.2          1.6         0.2 #>  [31,]          4.8         3.1          1.6         0.2 #>  [32,]          5.4         3.4          1.5         0.4 #>  [33,]          5.2         4.1          1.5         0.1 #>  [34,]          5.5         4.2          1.4         0.2 #>  [35,]          4.9         3.1          1.5         0.2 #>  [36,]          5.0         3.2          1.2         0.2 #>  [37,]          5.5         3.5          1.3         0.2 #>  [38,]          4.9         3.6          1.4         0.1 #>  [39,]          4.4         3.0          1.3         0.2 #>  [40,]          5.1         3.4          1.5         0.2 #>  [41,]          5.0         3.5          1.3         0.3 #>  [42,]          4.5         2.3          1.3         0.3 #>  [43,]          4.4         3.2          1.3         0.2 #>  [44,]          5.0         3.5          1.6         0.6 #>  [45,]          5.1         3.8          1.9         0.4 #>  [46,]          4.8         3.0          1.4         0.3 #>  [47,]          5.1         3.8          1.6         0.2 #>  [48,]          4.6         3.2          1.4         0.2 #>  [49,]          5.3         3.7          1.5         0.2 #>  [50,]          5.0         3.3          1.4         0.2 #>  [51,]          7.0         3.2          4.7         1.4 #>  [52,]          6.4         3.2          4.5         1.5 #>  [53,]          6.9         3.1          4.9         1.5 #>  [54,]          5.5         2.3          4.0         1.3 #>  [55,]          6.5         2.8          4.6         1.5 #>  [56,]          5.7         2.8          4.5         1.3 #>  [57,]          6.3         3.3          4.7         1.6 #>  [58,]          4.9         2.4          3.3         1.0 #>  [59,]          6.6         2.9          4.6         1.3 #>  [60,]          5.2         2.7          3.9         1.4 #>  [61,]          5.0         2.0          3.5         1.0 #>  [62,]          5.9         3.0          4.2         1.5 #>  [63,]          6.0         2.2          4.0         1.0 #>  [64,]          6.1         2.9          4.7         1.4 #>  [65,]          5.6         2.9          3.6         1.3 #>  [66,]          6.7         3.1          4.4         1.4 #>  [67,]          5.6         3.0          4.5         1.5 #>  [68,]          5.8         2.7          4.1         1.0 #>  [69,]          6.2         2.2          4.5         1.5 #>  [70,]          5.6         2.5          3.9         1.1 #>  [71,]          5.9         3.2          4.8         1.8 #>  [72,]          6.1         2.8          4.0         1.3 #>  [73,]          6.3         2.5          4.9         1.5 #>  [74,]          6.1         2.8          4.7         1.2 #>  [75,]          6.4         2.9          4.3         1.3 #>  [76,]          6.6         3.0          4.4         1.4 #>  [77,]          6.8         2.8          4.8         1.4 #>  [78,]          6.7         3.0          5.0         1.7 #>  [79,]          6.0         2.9          4.5         1.5 #>  [80,]          5.7         2.6          3.5         1.0 #>  [81,]          5.5         2.4          3.8         1.1 #>  [82,]          5.5         2.4          3.7         1.0 #>  [83,]          5.8         2.7          3.9         1.2 #>  [84,]          6.0         2.7          5.1         1.6 #>  [85,]          5.4         3.0          4.5         1.5 #>  [86,]          6.0         3.4          4.5         1.6 #>  [87,]          6.7         3.1          4.7         1.5 #>  [88,]          6.3         2.3          4.4         1.3 #>  [89,]          5.6         3.0          4.1         1.3 #>  [90,]          5.5         2.5          4.0         1.3 #>  [91,]          5.5         2.6          4.4         1.2 #>  [92,]          6.1         3.0          4.6         1.4 #>  [93,]          5.8         2.6          4.0         1.2 #>  [94,]          5.0         2.3          3.3         1.0 #>  [95,]          5.6         2.7          4.2         1.3 #>  [96,]          5.7         3.0          4.2         1.2 #>  [97,]          5.7         2.9          4.2         1.3 #>  [98,]          6.2         2.9          4.3         1.3 #>  [99,]          5.1         2.5          3.0         1.1 #> [100,]          5.7         2.8          4.1         1.3 #> [101,]          6.3         3.3          6.0         2.5 #> [102,]          5.8         2.7          5.1         1.9 #> [103,]          7.1         3.0          5.9         2.1 #> [104,]          6.3         2.9          5.6         1.8 #> [105,]          6.5         3.0          5.8         2.2 #> [106,]          7.6         3.0          6.6         2.1 #> [107,]          4.9         2.5          4.5         1.7 #> [108,]          7.3         2.9          6.3         1.8 #> [109,]          6.7         2.5          5.8         1.8 #> [110,]          7.2         3.6          6.1         2.5 #> [111,]          6.5         3.2          5.1         2.0 #> [112,]          6.4         2.7          5.3         1.9 #> [113,]          6.8         3.0          5.5         2.1 #> [114,]          5.7         2.5          5.0         2.0 #> [115,]          5.8         2.8          5.1         2.4 #> [116,]          6.4         3.2          5.3         2.3 #> [117,]          6.5         3.0          5.5         1.8 #> [118,]          7.7         3.8          6.7         2.2 #> [119,]          7.7         2.6          6.9         2.3 #> [120,]          6.0         2.2          5.0         1.5 #> [121,]          6.9         3.2          5.7         2.3 #> [122,]          5.6         2.8          4.9         2.0 #> [123,]          7.7         2.8          6.7         2.0 #> [124,]          6.3         2.7          4.9         1.8 #> [125,]          6.7         3.3          5.7         2.1 #> [126,]          7.2         3.2          6.0         1.8 #> [127,]          6.2         2.8          4.8         1.8 #> [128,]          6.1         3.0          4.9         1.8 #> [129,]          6.4         2.8          5.6         2.1 #> [130,]          7.2         3.0          5.8         1.6 #> [131,]          7.4         2.8          6.1         1.9 #> [132,]          7.9         3.8          6.4         2.0 #> [133,]          6.4         2.8          5.6         2.2 #> [134,]          6.3         2.8          5.1         1.5 #> [135,]          6.1         2.6          5.6         1.4 #> [136,]          7.7         3.0          6.1         2.3 #> [137,]          6.3         3.4          5.6         2.4 #> [138,]          6.4         3.1          5.5         1.8 #> [139,]          6.0         3.0          4.8         1.8 #> [140,]          6.9         3.1          5.4         2.1 #> [141,]          6.7         3.1          5.6         2.4 #> [142,]          6.9         3.1          5.1         2.3 #> [143,]          5.8         2.7          5.1         1.9 #> [144,]          6.8         3.2          5.9         2.3 #> [145,]          6.7         3.3          5.7         2.5 #> [146,]          6.7         3.0          5.2         2.3 #> [147,]          6.3         2.5          5.0         1.9 #> [148,]          6.5         3.0          5.2         2.0 #> [149,]          6.2         3.4          5.4         2.3 #> [150,]          5.9         3.0          5.1         1.8 #>  #> Slot \"meta\": #>        Species #> 1       setosa #> 2       setosa #> 3       setosa #> 4       setosa #> 5       setosa #> 6       setosa #> 7       setosa #> 8       setosa #> 9       setosa #> 10      setosa #> 11      setosa #> 12      setosa #> 13      setosa #> 14      setosa #> 15      setosa #> 16      setosa #> 17      setosa #> 18      setosa #> 19      setosa #> 20      setosa #> 21      setosa #> 22      setosa #> 23      setosa #> 24      setosa #> 25      setosa #> 26      setosa #> 27      setosa #> 28      setosa #> 29      setosa #> 30      setosa #> 31      setosa #> 32      setosa #> 33      setosa #> 34      setosa #> 35      setosa #> 36      setosa #> 37      setosa #> 38      setosa #> 39      setosa #> 40      setosa #> 41      setosa #> 42      setosa #> 43      setosa #> 44      setosa #> 45      setosa #> 46      setosa #> 47      setosa #> 48      setosa #> 49      setosa #> 50      setosa #> 51  versicolor #> 52  versicolor #> 53  versicolor #> 54  versicolor #> 55  versicolor #> 56  versicolor #> 57  versicolor #> 58  versicolor #> 59  versicolor #> 60  versicolor #> 61  versicolor #> 62  versicolor #> 63  versicolor #> 64  versicolor #> 65  versicolor #> 66  versicolor #> 67  versicolor #> 68  versicolor #> 69  versicolor #> 70  versicolor #> 71  versicolor #> 72  versicolor #> 73  versicolor #> 74  versicolor #> 75  versicolor #> 76  versicolor #> 77  versicolor #> 78  versicolor #> 79  versicolor #> 80  versicolor #> 81  versicolor #> 82  versicolor #> 83  versicolor #> 84  versicolor #> 85  versicolor #> 86  versicolor #> 87  versicolor #> 88  versicolor #> 89  versicolor #> 90  versicolor #> 91  versicolor #> 92  versicolor #> 93  versicolor #> 94  versicolor #> 95  versicolor #> 96  versicolor #> 97  versicolor #> 98  versicolor #> 99  versicolor #> 100 versicolor #> 101  virginica #> 102  virginica #> 103  virginica #> 104  virginica #> 105  virginica #> 106  virginica #> 107  virginica #> 108  virginica #> 109  virginica #> 110  virginica #> 111  virginica #> 112  virginica #> 113  virginica #> 114  virginica #> 115  virginica #> 116  virginica #> 117  virginica #> 118  virginica #> 119  virginica #> 120  virginica #> 121  virginica #> 122  virginica #> 123  virginica #> 124  virginica #> 125  virginica #> 126  virginica #> 127  virginica #> 128  virginica #> 129  virginica #> 130  virginica #> 131  virginica #> 132  virginica #> 133  virginica #> 134  virginica #> 135  virginica #> 136  virginica #> 137  virginica #> 138  virginica #> 139  virginica #> 140  virginica #> 141  virginica #> 142  virginica #> 143  virginica #> 144  virginica #> 145  virginica #> 146  virginica #> 147  virginica #> 148  virginica #> 149  virginica #> 150  virginica #>"},{"path":"/reference/dimRed-package.html","id":null,"dir":"Reference","previous_headings":"","what":"The dimRed package — dimRed-package","title":"The dimRed package — dimRed-package","text":"package simplifies dimensionality reduction R   providing framework S4 classes methods. dimRed collects   dimensionality reduction methods implemented R implements   others. gives common interface provides plotting   functions visualization functions quality assessment. Funding provided Department Biogeochemical Integration, Empirical Inference Earth System Group, Max Plack Institute Biogeochemistry, Jena.","code":""},{"path":"/reference/dimRed-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"The dimRed package — dimRed-package","text":"Lee, J.., Renard, E., Bernard, G., Dupont, P., Verleysen, M., 2013. Type 1 2 mixtures Kullback-Leibler divergences cost functions dimensionality reduction based similarity preservation. Neurocomputing. 112, 92-107. doi:10.1016/j.neucom.2012.12.036 Lee, J.., Lee, J.., Verleysen, M., 2008. Rank-based quality assessment nonlinear dimensionality reduction. Proceedings ESANN 2008 49-54. Chen, L., Buja, ., 2006. Local Multidimensional Scaling Nonlinear Dimension Reduction, Graph Layout Proximity Analysis.","code":""},{"path":[]},{"path":"/reference/dimRed-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The dimRed package — dimRed-package","text":"Maintainer: Guido Kraemer guido.kraemer@uni-leipzig.de (ORCID)","code":""},{"path":"/reference/dimRedData-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"class hold data dimensionality reduction methods.","code":""},{"path":"/reference/dimRedData-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class ","text":"","code":"# S4 method for dimRedData as.data.frame(x, meta.prefix = \"meta.\", data.prefix = \"\")  # S4 method for dimRedData getData(object)  # S4 method for dimRedData getMeta(object)  # S4 method for dimRedData nrow(x)  # S4 method for dimRedData,ANY,ANY,ANY [(x, i)  # S4 method for dimRedData ndims(object)"},{"path":"/reference/dimRedData-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class ","text":"x class dimRedData meta.prefix Prefix columns meta data names. data.prefix Prefix columns variable names. object class dimRedData. valid index subsetting rows.","code":""},{"path":"/reference/dimRedData-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class ","text":"class hast two slots, data meta. data slot contains numeric matrix variables columns observations rows. meta slot may contain data.frame additional information. slots need number rows meta slot needs contain empty data.frame. See examples easy conversion data.frame. plotting functions see plot.dimRedData.","code":""},{"path":"/reference/dimRedData-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Class ","text":".data.frame(dimRedData): convert data.frame getData(dimRedData): Get data slot. getMeta(dimRedData): Get meta slot. nrow(dimRedData): Get number observations. x[: Subset rows. ndims(dimRedData): Extract number Variables data.","code":""},{"path":"/reference/dimRedData-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"data class matrix, holds data, observations rows, variables columns meta class data.frame, holds meta data classes, internal manifold coordinates, simply additional data data set. Must number rows data slot empty data frame.","code":""},{"path":[]},{"path":"/reference/dimRedData-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"## Load an example data set: s3d <- loadDataSet(\"3D S Curve\")  ## Create using a constructor:  ### without meta information: dimRedData(iris[, 1:4]) #> An object of class \"dimRedData\" #> Slot \"data\": #>        Sepal.Length Sepal.Width Petal.Length Petal.Width #>   [1,]          5.1         3.5          1.4         0.2 #>   [2,]          4.9         3.0          1.4         0.2 #>   [3,]          4.7         3.2          1.3         0.2 #>   [4,]          4.6         3.1          1.5         0.2 #>   [5,]          5.0         3.6          1.4         0.2 #>   [6,]          5.4         3.9          1.7         0.4 #>   [7,]          4.6         3.4          1.4         0.3 #>   [8,]          5.0         3.4          1.5         0.2 #>   [9,]          4.4         2.9          1.4         0.2 #>  [10,]          4.9         3.1          1.5         0.1 #>  [11,]          5.4         3.7          1.5         0.2 #>  [12,]          4.8         3.4          1.6         0.2 #>  [13,]          4.8         3.0          1.4         0.1 #>  [14,]          4.3         3.0          1.1         0.1 #>  [15,]          5.8         4.0          1.2         0.2 #>  [16,]          5.7         4.4          1.5         0.4 #>  [17,]          5.4         3.9          1.3         0.4 #>  [18,]          5.1         3.5          1.4         0.3 #>  [19,]          5.7         3.8          1.7         0.3 #>  [20,]          5.1         3.8          1.5         0.3 #>  [21,]          5.4         3.4          1.7         0.2 #>  [22,]          5.1         3.7          1.5         0.4 #>  [23,]          4.6         3.6          1.0         0.2 #>  [24,]          5.1         3.3          1.7         0.5 #>  [25,]          4.8         3.4          1.9         0.2 #>  [26,]          5.0         3.0          1.6         0.2 #>  [27,]          5.0         3.4          1.6         0.4 #>  [28,]          5.2         3.5          1.5         0.2 #>  [29,]          5.2         3.4          1.4         0.2 #>  [30,]          4.7         3.2          1.6         0.2 #>  [31,]          4.8         3.1          1.6         0.2 #>  [32,]          5.4         3.4          1.5         0.4 #>  [33,]          5.2         4.1          1.5         0.1 #>  [34,]          5.5         4.2          1.4         0.2 #>  [35,]          4.9         3.1          1.5         0.2 #>  [36,]          5.0         3.2          1.2         0.2 #>  [37,]          5.5         3.5          1.3         0.2 #>  [38,]          4.9         3.6          1.4         0.1 #>  [39,]          4.4         3.0          1.3         0.2 #>  [40,]          5.1         3.4          1.5         0.2 #>  [41,]          5.0         3.5          1.3         0.3 #>  [42,]          4.5         2.3          1.3         0.3 #>  [43,]          4.4         3.2          1.3         0.2 #>  [44,]          5.0         3.5          1.6         0.6 #>  [45,]          5.1         3.8          1.9         0.4 #>  [46,]          4.8         3.0          1.4         0.3 #>  [47,]          5.1         3.8          1.6         0.2 #>  [48,]          4.6         3.2          1.4         0.2 #>  [49,]          5.3         3.7          1.5         0.2 #>  [50,]          5.0         3.3          1.4         0.2 #>  [51,]          7.0         3.2          4.7         1.4 #>  [52,]          6.4         3.2          4.5         1.5 #>  [53,]          6.9         3.1          4.9         1.5 #>  [54,]          5.5         2.3          4.0         1.3 #>  [55,]          6.5         2.8          4.6         1.5 #>  [56,]          5.7         2.8          4.5         1.3 #>  [57,]          6.3         3.3          4.7         1.6 #>  [58,]          4.9         2.4          3.3         1.0 #>  [59,]          6.6         2.9          4.6         1.3 #>  [60,]          5.2         2.7          3.9         1.4 #>  [61,]          5.0         2.0          3.5         1.0 #>  [62,]          5.9         3.0          4.2         1.5 #>  [63,]          6.0         2.2          4.0         1.0 #>  [64,]          6.1         2.9          4.7         1.4 #>  [65,]          5.6         2.9          3.6         1.3 #>  [66,]          6.7         3.1          4.4         1.4 #>  [67,]          5.6         3.0          4.5         1.5 #>  [68,]          5.8         2.7          4.1         1.0 #>  [69,]          6.2         2.2          4.5         1.5 #>  [70,]          5.6         2.5          3.9         1.1 #>  [71,]          5.9         3.2          4.8         1.8 #>  [72,]          6.1         2.8          4.0         1.3 #>  [73,]          6.3         2.5          4.9         1.5 #>  [74,]          6.1         2.8          4.7         1.2 #>  [75,]          6.4         2.9          4.3         1.3 #>  [76,]          6.6         3.0          4.4         1.4 #>  [77,]          6.8         2.8          4.8         1.4 #>  [78,]          6.7         3.0          5.0         1.7 #>  [79,]          6.0         2.9          4.5         1.5 #>  [80,]          5.7         2.6          3.5         1.0 #>  [81,]          5.5         2.4          3.8         1.1 #>  [82,]          5.5         2.4          3.7         1.0 #>  [83,]          5.8         2.7          3.9         1.2 #>  [84,]          6.0         2.7          5.1         1.6 #>  [85,]          5.4         3.0          4.5         1.5 #>  [86,]          6.0         3.4          4.5         1.6 #>  [87,]          6.7         3.1          4.7         1.5 #>  [88,]          6.3         2.3          4.4         1.3 #>  [89,]          5.6         3.0          4.1         1.3 #>  [90,]          5.5         2.5          4.0         1.3 #>  [91,]          5.5         2.6          4.4         1.2 #>  [92,]          6.1         3.0          4.6         1.4 #>  [93,]          5.8         2.6          4.0         1.2 #>  [94,]          5.0         2.3          3.3         1.0 #>  [95,]          5.6         2.7          4.2         1.3 #>  [96,]          5.7         3.0          4.2         1.2 #>  [97,]          5.7         2.9          4.2         1.3 #>  [98,]          6.2         2.9          4.3         1.3 #>  [99,]          5.1         2.5          3.0         1.1 #> [100,]          5.7         2.8          4.1         1.3 #> [101,]          6.3         3.3          6.0         2.5 #> [102,]          5.8         2.7          5.1         1.9 #> [103,]          7.1         3.0          5.9         2.1 #> [104,]          6.3         2.9          5.6         1.8 #> [105,]          6.5         3.0          5.8         2.2 #> [106,]          7.6         3.0          6.6         2.1 #> [107,]          4.9         2.5          4.5         1.7 #> [108,]          7.3         2.9          6.3         1.8 #> [109,]          6.7         2.5          5.8         1.8 #> [110,]          7.2         3.6          6.1         2.5 #> [111,]          6.5         3.2          5.1         2.0 #> [112,]          6.4         2.7          5.3         1.9 #> [113,]          6.8         3.0          5.5         2.1 #> [114,]          5.7         2.5          5.0         2.0 #> [115,]          5.8         2.8          5.1         2.4 #> [116,]          6.4         3.2          5.3         2.3 #> [117,]          6.5         3.0          5.5         1.8 #> [118,]          7.7         3.8          6.7         2.2 #> [119,]          7.7         2.6          6.9         2.3 #> [120,]          6.0         2.2          5.0         1.5 #> [121,]          6.9         3.2          5.7         2.3 #> [122,]          5.6         2.8          4.9         2.0 #> [123,]          7.7         2.8          6.7         2.0 #> [124,]          6.3         2.7          4.9         1.8 #> [125,]          6.7         3.3          5.7         2.1 #> [126,]          7.2         3.2          6.0         1.8 #> [127,]          6.2         2.8          4.8         1.8 #> [128,]          6.1         3.0          4.9         1.8 #> [129,]          6.4         2.8          5.6         2.1 #> [130,]          7.2         3.0          5.8         1.6 #> [131,]          7.4         2.8          6.1         1.9 #> [132,]          7.9         3.8          6.4         2.0 #> [133,]          6.4         2.8          5.6         2.2 #> [134,]          6.3         2.8          5.1         1.5 #> [135,]          6.1         2.6          5.6         1.4 #> [136,]          7.7         3.0          6.1         2.3 #> [137,]          6.3         3.4          5.6         2.4 #> [138,]          6.4         3.1          5.5         1.8 #> [139,]          6.0         3.0          4.8         1.8 #> [140,]          6.9         3.1          5.4         2.1 #> [141,]          6.7         3.1          5.6         2.4 #> [142,]          6.9         3.1          5.1         2.3 #> [143,]          5.8         2.7          5.1         1.9 #> [144,]          6.8         3.2          5.9         2.3 #> [145,]          6.7         3.3          5.7         2.5 #> [146,]          6.7         3.0          5.2         2.3 #> [147,]          6.3         2.5          5.0         1.9 #> [148,]          6.5         3.0          5.2         2.0 #> [149,]          6.2         3.4          5.4         2.3 #> [150,]          5.9         3.0          5.1         1.8 #>  #> Slot \"meta\": #> data frame with 0 columns and 0 rows #>   ### with meta information: dimRedData(iris[, 1:4], iris[, 5]) #> An object of class \"dimRedData\" #> Slot \"data\": #>        Sepal.Length Sepal.Width Petal.Length Petal.Width #>   [1,]          5.1         3.5          1.4         0.2 #>   [2,]          4.9         3.0          1.4         0.2 #>   [3,]          4.7         3.2          1.3         0.2 #>   [4,]          4.6         3.1          1.5         0.2 #>   [5,]          5.0         3.6          1.4         0.2 #>   [6,]          5.4         3.9          1.7         0.4 #>   [7,]          4.6         3.4          1.4         0.3 #>   [8,]          5.0         3.4          1.5         0.2 #>   [9,]          4.4         2.9          1.4         0.2 #>  [10,]          4.9         3.1          1.5         0.1 #>  [11,]          5.4         3.7          1.5         0.2 #>  [12,]          4.8         3.4          1.6         0.2 #>  [13,]          4.8         3.0          1.4         0.1 #>  [14,]          4.3         3.0          1.1         0.1 #>  [15,]          5.8         4.0          1.2         0.2 #>  [16,]          5.7         4.4          1.5         0.4 #>  [17,]          5.4         3.9          1.3         0.4 #>  [18,]          5.1         3.5          1.4         0.3 #>  [19,]          5.7         3.8          1.7         0.3 #>  [20,]          5.1         3.8          1.5         0.3 #>  [21,]          5.4         3.4          1.7         0.2 #>  [22,]          5.1         3.7          1.5         0.4 #>  [23,]          4.6         3.6          1.0         0.2 #>  [24,]          5.1         3.3          1.7         0.5 #>  [25,]          4.8         3.4          1.9         0.2 #>  [26,]          5.0         3.0          1.6         0.2 #>  [27,]          5.0         3.4          1.6         0.4 #>  [28,]          5.2         3.5          1.5         0.2 #>  [29,]          5.2         3.4          1.4         0.2 #>  [30,]          4.7         3.2          1.6         0.2 #>  [31,]          4.8         3.1          1.6         0.2 #>  [32,]          5.4         3.4          1.5         0.4 #>  [33,]          5.2         4.1          1.5         0.1 #>  [34,]          5.5         4.2          1.4         0.2 #>  [35,]          4.9         3.1          1.5         0.2 #>  [36,]          5.0         3.2          1.2         0.2 #>  [37,]          5.5         3.5          1.3         0.2 #>  [38,]          4.9         3.6          1.4         0.1 #>  [39,]          4.4         3.0          1.3         0.2 #>  [40,]          5.1         3.4          1.5         0.2 #>  [41,]          5.0         3.5          1.3         0.3 #>  [42,]          4.5         2.3          1.3         0.3 #>  [43,]          4.4         3.2          1.3         0.2 #>  [44,]          5.0         3.5          1.6         0.6 #>  [45,]          5.1         3.8          1.9         0.4 #>  [46,]          4.8         3.0          1.4         0.3 #>  [47,]          5.1         3.8          1.6         0.2 #>  [48,]          4.6         3.2          1.4         0.2 #>  [49,]          5.3         3.7          1.5         0.2 #>  [50,]          5.0         3.3          1.4         0.2 #>  [51,]          7.0         3.2          4.7         1.4 #>  [52,]          6.4         3.2          4.5         1.5 #>  [53,]          6.9         3.1          4.9         1.5 #>  [54,]          5.5         2.3          4.0         1.3 #>  [55,]          6.5         2.8          4.6         1.5 #>  [56,]          5.7         2.8          4.5         1.3 #>  [57,]          6.3         3.3          4.7         1.6 #>  [58,]          4.9         2.4          3.3         1.0 #>  [59,]          6.6         2.9          4.6         1.3 #>  [60,]          5.2         2.7          3.9         1.4 #>  [61,]          5.0         2.0          3.5         1.0 #>  [62,]          5.9         3.0          4.2         1.5 #>  [63,]          6.0         2.2          4.0         1.0 #>  [64,]          6.1         2.9          4.7         1.4 #>  [65,]          5.6         2.9          3.6         1.3 #>  [66,]          6.7         3.1          4.4         1.4 #>  [67,]          5.6         3.0          4.5         1.5 #>  [68,]          5.8         2.7          4.1         1.0 #>  [69,]          6.2         2.2          4.5         1.5 #>  [70,]          5.6         2.5          3.9         1.1 #>  [71,]          5.9         3.2          4.8         1.8 #>  [72,]          6.1         2.8          4.0         1.3 #>  [73,]          6.3         2.5          4.9         1.5 #>  [74,]          6.1         2.8          4.7         1.2 #>  [75,]          6.4         2.9          4.3         1.3 #>  [76,]          6.6         3.0          4.4         1.4 #>  [77,]          6.8         2.8          4.8         1.4 #>  [78,]          6.7         3.0          5.0         1.7 #>  [79,]          6.0         2.9          4.5         1.5 #>  [80,]          5.7         2.6          3.5         1.0 #>  [81,]          5.5         2.4          3.8         1.1 #>  [82,]          5.5         2.4          3.7         1.0 #>  [83,]          5.8         2.7          3.9         1.2 #>  [84,]          6.0         2.7          5.1         1.6 #>  [85,]          5.4         3.0          4.5         1.5 #>  [86,]          6.0         3.4          4.5         1.6 #>  [87,]          6.7         3.1          4.7         1.5 #>  [88,]          6.3         2.3          4.4         1.3 #>  [89,]          5.6         3.0          4.1         1.3 #>  [90,]          5.5         2.5          4.0         1.3 #>  [91,]          5.5         2.6          4.4         1.2 #>  [92,]          6.1         3.0          4.6         1.4 #>  [93,]          5.8         2.6          4.0         1.2 #>  [94,]          5.0         2.3          3.3         1.0 #>  [95,]          5.6         2.7          4.2         1.3 #>  [96,]          5.7         3.0          4.2         1.2 #>  [97,]          5.7         2.9          4.2         1.3 #>  [98,]          6.2         2.9          4.3         1.3 #>  [99,]          5.1         2.5          3.0         1.1 #> [100,]          5.7         2.8          4.1         1.3 #> [101,]          6.3         3.3          6.0         2.5 #> [102,]          5.8         2.7          5.1         1.9 #> [103,]          7.1         3.0          5.9         2.1 #> [104,]          6.3         2.9          5.6         1.8 #> [105,]          6.5         3.0          5.8         2.2 #> [106,]          7.6         3.0          6.6         2.1 #> [107,]          4.9         2.5          4.5         1.7 #> [108,]          7.3         2.9          6.3         1.8 #> [109,]          6.7         2.5          5.8         1.8 #> [110,]          7.2         3.6          6.1         2.5 #> [111,]          6.5         3.2          5.1         2.0 #> [112,]          6.4         2.7          5.3         1.9 #> [113,]          6.8         3.0          5.5         2.1 #> [114,]          5.7         2.5          5.0         2.0 #> [115,]          5.8         2.8          5.1         2.4 #> [116,]          6.4         3.2          5.3         2.3 #> [117,]          6.5         3.0          5.5         1.8 #> [118,]          7.7         3.8          6.7         2.2 #> [119,]          7.7         2.6          6.9         2.3 #> [120,]          6.0         2.2          5.0         1.5 #> [121,]          6.9         3.2          5.7         2.3 #> [122,]          5.6         2.8          4.9         2.0 #> [123,]          7.7         2.8          6.7         2.0 #> [124,]          6.3         2.7          4.9         1.8 #> [125,]          6.7         3.3          5.7         2.1 #> [126,]          7.2         3.2          6.0         1.8 #> [127,]          6.2         2.8          4.8         1.8 #> [128,]          6.1         3.0          4.9         1.8 #> [129,]          6.4         2.8          5.6         2.1 #> [130,]          7.2         3.0          5.8         1.6 #> [131,]          7.4         2.8          6.1         1.9 #> [132,]          7.9         3.8          6.4         2.0 #> [133,]          6.4         2.8          5.6         2.2 #> [134,]          6.3         2.8          5.1         1.5 #> [135,]          6.1         2.6          5.6         1.4 #> [136,]          7.7         3.0          6.1         2.3 #> [137,]          6.3         3.4          5.6         2.4 #> [138,]          6.4         3.1          5.5         1.8 #> [139,]          6.0         3.0          4.8         1.8 #> [140,]          6.9         3.1          5.4         2.1 #> [141,]          6.7         3.1          5.6         2.4 #> [142,]          6.9         3.1          5.1         2.3 #> [143,]          5.8         2.7          5.1         1.9 #> [144,]          6.8         3.2          5.9         2.3 #> [145,]          6.7         3.3          5.7         2.5 #> [146,]          6.7         3.0          5.2         2.3 #> [147,]          6.3         2.5          5.0         1.9 #> [148,]          6.5         3.0          5.2         2.0 #> [149,]          6.2         3.4          5.4         2.3 #> [150,]          5.9         3.0          5.1         1.8 #>  #> Slot \"meta\": #>           meta #> 1       setosa #> 2       setosa #> 3       setosa #> 4       setosa #> 5       setosa #> 6       setosa #> 7       setosa #> 8       setosa #> 9       setosa #> 10      setosa #> 11      setosa #> 12      setosa #> 13      setosa #> 14      setosa #> 15      setosa #> 16      setosa #> 17      setosa #> 18      setosa #> 19      setosa #> 20      setosa #> 21      setosa #> 22      setosa #> 23      setosa #> 24      setosa #> 25      setosa #> 26      setosa #> 27      setosa #> 28      setosa #> 29      setosa #> 30      setosa #> 31      setosa #> 32      setosa #> 33      setosa #> 34      setosa #> 35      setosa #> 36      setosa #> 37      setosa #> 38      setosa #> 39      setosa #> 40      setosa #> 41      setosa #> 42      setosa #> 43      setosa #> 44      setosa #> 45      setosa #> 46      setosa #> 47      setosa #> 48      setosa #> 49      setosa #> 50      setosa #> 51  versicolor #> 52  versicolor #> 53  versicolor #> 54  versicolor #> 55  versicolor #> 56  versicolor #> 57  versicolor #> 58  versicolor #> 59  versicolor #> 60  versicolor #> 61  versicolor #> 62  versicolor #> 63  versicolor #> 64  versicolor #> 65  versicolor #> 66  versicolor #> 67  versicolor #> 68  versicolor #> 69  versicolor #> 70  versicolor #> 71  versicolor #> 72  versicolor #> 73  versicolor #> 74  versicolor #> 75  versicolor #> 76  versicolor #> 77  versicolor #> 78  versicolor #> 79  versicolor #> 80  versicolor #> 81  versicolor #> 82  versicolor #> 83  versicolor #> 84  versicolor #> 85  versicolor #> 86  versicolor #> 87  versicolor #> 88  versicolor #> 89  versicolor #> 90  versicolor #> 91  versicolor #> 92  versicolor #> 93  versicolor #> 94  versicolor #> 95  versicolor #> 96  versicolor #> 97  versicolor #> 98  versicolor #> 99  versicolor #> 100 versicolor #> 101  virginica #> 102  virginica #> 103  virginica #> 104  virginica #> 105  virginica #> 106  virginica #> 107  virginica #> 108  virginica #> 109  virginica #> 110  virginica #> 111  virginica #> 112  virginica #> 113  virginica #> 114  virginica #> 115  virginica #> 116  virginica #> 117  virginica #> 118  virginica #> 119  virginica #> 120  virginica #> 121  virginica #> 122  virginica #> 123  virginica #> 124  virginica #> 125  virginica #> 126  virginica #> 127  virginica #> 128  virginica #> 129  virginica #> 130  virginica #> 131  virginica #> 132  virginica #> 133  virginica #> 134  virginica #> 135  virginica #> 136  virginica #> 137  virginica #> 138  virginica #> 139  virginica #> 140  virginica #> 141  virginica #> 142  virginica #> 143  virginica #> 144  virginica #> 145  virginica #> 146  virginica #> 147  virginica #> 148  virginica #> 149  virginica #> 150  virginica #>   ### using slot names: dimRedData(data = iris[, 1:4], meta = iris[, 5]) #> An object of class \"dimRedData\" #> Slot \"data\": #>        Sepal.Length Sepal.Width Petal.Length Petal.Width #>   [1,]          5.1         3.5          1.4         0.2 #>   [2,]          4.9         3.0          1.4         0.2 #>   [3,]          4.7         3.2          1.3         0.2 #>   [4,]          4.6         3.1          1.5         0.2 #>   [5,]          5.0         3.6          1.4         0.2 #>   [6,]          5.4         3.9          1.7         0.4 #>   [7,]          4.6         3.4          1.4         0.3 #>   [8,]          5.0         3.4          1.5         0.2 #>   [9,]          4.4         2.9          1.4         0.2 #>  [10,]          4.9         3.1          1.5         0.1 #>  [11,]          5.4         3.7          1.5         0.2 #>  [12,]          4.8         3.4          1.6         0.2 #>  [13,]          4.8         3.0          1.4         0.1 #>  [14,]          4.3         3.0          1.1         0.1 #>  [15,]          5.8         4.0          1.2         0.2 #>  [16,]          5.7         4.4          1.5         0.4 #>  [17,]          5.4         3.9          1.3         0.4 #>  [18,]          5.1         3.5          1.4         0.3 #>  [19,]          5.7         3.8          1.7         0.3 #>  [20,]          5.1         3.8          1.5         0.3 #>  [21,]          5.4         3.4          1.7         0.2 #>  [22,]          5.1         3.7          1.5         0.4 #>  [23,]          4.6         3.6          1.0         0.2 #>  [24,]          5.1         3.3          1.7         0.5 #>  [25,]          4.8         3.4          1.9         0.2 #>  [26,]          5.0         3.0          1.6         0.2 #>  [27,]          5.0         3.4          1.6         0.4 #>  [28,]          5.2         3.5          1.5         0.2 #>  [29,]          5.2         3.4          1.4         0.2 #>  [30,]          4.7         3.2          1.6         0.2 #>  [31,]          4.8         3.1          1.6         0.2 #>  [32,]          5.4         3.4          1.5         0.4 #>  [33,]          5.2         4.1          1.5         0.1 #>  [34,]          5.5         4.2          1.4         0.2 #>  [35,]          4.9         3.1          1.5         0.2 #>  [36,]          5.0         3.2          1.2         0.2 #>  [37,]          5.5         3.5          1.3         0.2 #>  [38,]          4.9         3.6          1.4         0.1 #>  [39,]          4.4         3.0          1.3         0.2 #>  [40,]          5.1         3.4          1.5         0.2 #>  [41,]          5.0         3.5          1.3         0.3 #>  [42,]          4.5         2.3          1.3         0.3 #>  [43,]          4.4         3.2          1.3         0.2 #>  [44,]          5.0         3.5          1.6         0.6 #>  [45,]          5.1         3.8          1.9         0.4 #>  [46,]          4.8         3.0          1.4         0.3 #>  [47,]          5.1         3.8          1.6         0.2 #>  [48,]          4.6         3.2          1.4         0.2 #>  [49,]          5.3         3.7          1.5         0.2 #>  [50,]          5.0         3.3          1.4         0.2 #>  [51,]          7.0         3.2          4.7         1.4 #>  [52,]          6.4         3.2          4.5         1.5 #>  [53,]          6.9         3.1          4.9         1.5 #>  [54,]          5.5         2.3          4.0         1.3 #>  [55,]          6.5         2.8          4.6         1.5 #>  [56,]          5.7         2.8          4.5         1.3 #>  [57,]          6.3         3.3          4.7         1.6 #>  [58,]          4.9         2.4          3.3         1.0 #>  [59,]          6.6         2.9          4.6         1.3 #>  [60,]          5.2         2.7          3.9         1.4 #>  [61,]          5.0         2.0          3.5         1.0 #>  [62,]          5.9         3.0          4.2         1.5 #>  [63,]          6.0         2.2          4.0         1.0 #>  [64,]          6.1         2.9          4.7         1.4 #>  [65,]          5.6         2.9          3.6         1.3 #>  [66,]          6.7         3.1          4.4         1.4 #>  [67,]          5.6         3.0          4.5         1.5 #>  [68,]          5.8         2.7          4.1         1.0 #>  [69,]          6.2         2.2          4.5         1.5 #>  [70,]          5.6         2.5          3.9         1.1 #>  [71,]          5.9         3.2          4.8         1.8 #>  [72,]          6.1         2.8          4.0         1.3 #>  [73,]          6.3         2.5          4.9         1.5 #>  [74,]          6.1         2.8          4.7         1.2 #>  [75,]          6.4         2.9          4.3         1.3 #>  [76,]          6.6         3.0          4.4         1.4 #>  [77,]          6.8         2.8          4.8         1.4 #>  [78,]          6.7         3.0          5.0         1.7 #>  [79,]          6.0         2.9          4.5         1.5 #>  [80,]          5.7         2.6          3.5         1.0 #>  [81,]          5.5         2.4          3.8         1.1 #>  [82,]          5.5         2.4          3.7         1.0 #>  [83,]          5.8         2.7          3.9         1.2 #>  [84,]          6.0         2.7          5.1         1.6 #>  [85,]          5.4         3.0          4.5         1.5 #>  [86,]          6.0         3.4          4.5         1.6 #>  [87,]          6.7         3.1          4.7         1.5 #>  [88,]          6.3         2.3          4.4         1.3 #>  [89,]          5.6         3.0          4.1         1.3 #>  [90,]          5.5         2.5          4.0         1.3 #>  [91,]          5.5         2.6          4.4         1.2 #>  [92,]          6.1         3.0          4.6         1.4 #>  [93,]          5.8         2.6          4.0         1.2 #>  [94,]          5.0         2.3          3.3         1.0 #>  [95,]          5.6         2.7          4.2         1.3 #>  [96,]          5.7         3.0          4.2         1.2 #>  [97,]          5.7         2.9          4.2         1.3 #>  [98,]          6.2         2.9          4.3         1.3 #>  [99,]          5.1         2.5          3.0         1.1 #> [100,]          5.7         2.8          4.1         1.3 #> [101,]          6.3         3.3          6.0         2.5 #> [102,]          5.8         2.7          5.1         1.9 #> [103,]          7.1         3.0          5.9         2.1 #> [104,]          6.3         2.9          5.6         1.8 #> [105,]          6.5         3.0          5.8         2.2 #> [106,]          7.6         3.0          6.6         2.1 #> [107,]          4.9         2.5          4.5         1.7 #> [108,]          7.3         2.9          6.3         1.8 #> [109,]          6.7         2.5          5.8         1.8 #> [110,]          7.2         3.6          6.1         2.5 #> [111,]          6.5         3.2          5.1         2.0 #> [112,]          6.4         2.7          5.3         1.9 #> [113,]          6.8         3.0          5.5         2.1 #> [114,]          5.7         2.5          5.0         2.0 #> [115,]          5.8         2.8          5.1         2.4 #> [116,]          6.4         3.2          5.3         2.3 #> [117,]          6.5         3.0          5.5         1.8 #> [118,]          7.7         3.8          6.7         2.2 #> [119,]          7.7         2.6          6.9         2.3 #> [120,]          6.0         2.2          5.0         1.5 #> [121,]          6.9         3.2          5.7         2.3 #> [122,]          5.6         2.8          4.9         2.0 #> [123,]          7.7         2.8          6.7         2.0 #> [124,]          6.3         2.7          4.9         1.8 #> [125,]          6.7         3.3          5.7         2.1 #> [126,]          7.2         3.2          6.0         1.8 #> [127,]          6.2         2.8          4.8         1.8 #> [128,]          6.1         3.0          4.9         1.8 #> [129,]          6.4         2.8          5.6         2.1 #> [130,]          7.2         3.0          5.8         1.6 #> [131,]          7.4         2.8          6.1         1.9 #> [132,]          7.9         3.8          6.4         2.0 #> [133,]          6.4         2.8          5.6         2.2 #> [134,]          6.3         2.8          5.1         1.5 #> [135,]          6.1         2.6          5.6         1.4 #> [136,]          7.7         3.0          6.1         2.3 #> [137,]          6.3         3.4          5.6         2.4 #> [138,]          6.4         3.1          5.5         1.8 #> [139,]          6.0         3.0          4.8         1.8 #> [140,]          6.9         3.1          5.4         2.1 #> [141,]          6.7         3.1          5.6         2.4 #> [142,]          6.9         3.1          5.1         2.3 #> [143,]          5.8         2.7          5.1         1.9 #> [144,]          6.8         3.2          5.9         2.3 #> [145,]          6.7         3.3          5.7         2.5 #> [146,]          6.7         3.0          5.2         2.3 #> [147,]          6.3         2.5          5.0         1.9 #> [148,]          6.5         3.0          5.2         2.0 #> [149,]          6.2         3.4          5.4         2.3 #> [150,]          5.9         3.0          5.1         1.8 #>  #> Slot \"meta\": #>           meta #> 1       setosa #> 2       setosa #> 3       setosa #> 4       setosa #> 5       setosa #> 6       setosa #> 7       setosa #> 8       setosa #> 9       setosa #> 10      setosa #> 11      setosa #> 12      setosa #> 13      setosa #> 14      setosa #> 15      setosa #> 16      setosa #> 17      setosa #> 18      setosa #> 19      setosa #> 20      setosa #> 21      setosa #> 22      setosa #> 23      setosa #> 24      setosa #> 25      setosa #> 26      setosa #> 27      setosa #> 28      setosa #> 29      setosa #> 30      setosa #> 31      setosa #> 32      setosa #> 33      setosa #> 34      setosa #> 35      setosa #> 36      setosa #> 37      setosa #> 38      setosa #> 39      setosa #> 40      setosa #> 41      setosa #> 42      setosa #> 43      setosa #> 44      setosa #> 45      setosa #> 46      setosa #> 47      setosa #> 48      setosa #> 49      setosa #> 50      setosa #> 51  versicolor #> 52  versicolor #> 53  versicolor #> 54  versicolor #> 55  versicolor #> 56  versicolor #> 57  versicolor #> 58  versicolor #> 59  versicolor #> 60  versicolor #> 61  versicolor #> 62  versicolor #> 63  versicolor #> 64  versicolor #> 65  versicolor #> 66  versicolor #> 67  versicolor #> 68  versicolor #> 69  versicolor #> 70  versicolor #> 71  versicolor #> 72  versicolor #> 73  versicolor #> 74  versicolor #> 75  versicolor #> 76  versicolor #> 77  versicolor #> 78  versicolor #> 79  versicolor #> 80  versicolor #> 81  versicolor #> 82  versicolor #> 83  versicolor #> 84  versicolor #> 85  versicolor #> 86  versicolor #> 87  versicolor #> 88  versicolor #> 89  versicolor #> 90  versicolor #> 91  versicolor #> 92  versicolor #> 93  versicolor #> 94  versicolor #> 95  versicolor #> 96  versicolor #> 97  versicolor #> 98  versicolor #> 99  versicolor #> 100 versicolor #> 101  virginica #> 102  virginica #> 103  virginica #> 104  virginica #> 105  virginica #> 106  virginica #> 107  virginica #> 108  virginica #> 109  virginica #> 110  virginica #> 111  virginica #> 112  virginica #> 113  virginica #> 114  virginica #> 115  virginica #> 116  virginica #> 117  virginica #> 118  virginica #> 119  virginica #> 120  virginica #> 121  virginica #> 122  virginica #> 123  virginica #> 124  virginica #> 125  virginica #> 126  virginica #> 127  virginica #> 128  virginica #> 129  virginica #> 130  virginica #> 131  virginica #> 132  virginica #> 133  virginica #> 134  virginica #> 135  virginica #> 136  virginica #> 137  virginica #> 138  virginica #> 139  virginica #> 140  virginica #> 141  virginica #> 142  virginica #> 143  virginica #> 144  virginica #> 145  virginica #> 146  virginica #> 147  virginica #> 148  virginica #> 149  virginica #> 150  virginica #>   ## Convert to a dimRedData objects: Iris <- as(iris[, 1:4], \"dimRedData\")  ## Convert to data.frame: head(as(s3d, \"data.frame\")) #>      meta.x    meta.y          x         y          z #> 1 -3.021469 1.4638981 -0.1072140 1.5029277  1.9779528 #> 2  2.812930 1.6593310  0.3549164 1.6539398 -1.8550226 #> 3 -1.143790 0.6508086 -0.9393959 0.6389731  0.5506825 #> 4 -1.803581 1.5900944 -1.0663543 1.5694958  1.2841629 #> 5  1.051515 1.9486942  0.8672332 1.9302189 -0.4196088 #> 6  2.379555 0.9830578  0.6445032 0.9844853 -1.7174701 head(as.data.frame(s3d)) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'head': cannot coerce class ‘structure(\"dimRedData\", package = \"dimRed\")’ to a data.frame head(as.data.frame(as(iris[, 1:4], \"dimRedData\"))) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'head': cannot coerce class ‘structure(\"dimRedData\", package = \"dimRed\")’ to a data.frame  ## Extract slots: head(getData(s3d)) #>               x         y          z #> [1,] -0.1072140 1.5029277  1.9779528 #> [2,]  0.3549164 1.6539398 -1.8550226 #> [3,] -0.9393959 0.6389731  0.5506825 #> [4,] -1.0663543 1.5694958  1.2841629 #> [5,]  0.8672332 1.9302189 -0.4196088 #> [6,]  0.6445032 0.9844853 -1.7174701 head(getMeta(s3d)) #>           x         y #> 1 -3.021469 1.4638981 #> 2  2.812930 1.6593310 #> 3 -1.143790 0.6508086 #> 4 -1.803581 1.5900944 #> 5  1.051515 1.9486942 #> 6  2.379555 0.9830578  ## Get the number of observations: nrow(s3d) #> [1] 2000  ## Subset: s3d[1:5, ] #> An object of class \"dimRedData\" #> Slot \"data\": #>               x         y          z #> [1,] -0.1072140 1.5029277  1.9779528 #> [2,]  0.3549164 1.6539398 -1.8550226 #> [3,] -0.9393959 0.6389731  0.5506825 #> [4,] -1.0663543 1.5694958  1.2841629 #> [5,]  0.8672332 1.9302189 -0.4196088 #>  #> Slot \"meta\": #>           x         y #> 1 -3.021469 1.4638981 #> 2  2.812930 1.6593310 #> 3 -1.143790 0.6508086 #> 4 -1.803581 1.5900944 #> 5  1.051515 1.9486942 #>   ## Shuffle data: s3 <- s3d[nrow(s3d)]  ## Get the number of variables: ndims(s3d) #> [1] 3"},{"path":"/reference/dimRedMethod-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"virtual class \"dimRedMethod\" serve template implement methods dimensionality reduction.","code":""},{"path":"/reference/dimRedMethod-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Class ","text":"Implementations dimensionality reductions inherit class. fun slot function takes three arguments data object class dimRedData. pars list standard parameters. keep.org.data Logical. original data kept output. returns object class dimRedResult. stdpars slot take list contains standard parameters implemented methods. way method can called embed(data, \"method-name\", ...), ... can used change single parameters.","code":""},{"path":"/reference/dimRedMethod-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"fun function embedding. stdpars list default parameters fun slot. requires vector packages R packages need installed run method. occasions method may work without one packages. include Python dependencies Tensorflow. Used auto skip tests","code":""},{"path":[]},{"path":"/reference/dimRedMethodList.html","id":null,"dir":"Reference","previous_headings":"","what":"dimRedMethodList — dimRedMethodList","title":"dimRedMethodList — dimRedMethodList","text":"Get names methods dimensionality reduction.","code":""},{"path":"/reference/dimRedMethodList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dimRedMethodList — dimRedMethodList","text":"","code":"dimRedMethodList(filter = FALSE)"},{"path":"/reference/dimRedMethodList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dimRedMethodList — dimRedMethodList","text":"filter filter methods methods dependencies installed","code":""},{"path":"/reference/dimRedMethodList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dimRedMethodList — dimRedMethodList","text":"character vector names classes inherit     dimRedMethod.","code":""},{"path":"/reference/dimRedMethodList.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dimRedMethodList — dimRedMethodList","text":"Returns name classes inherit dimRedMethod-class use embed.","code":""},{"path":[]},{"path":"/reference/dimRedMethodList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dimRedMethodList — dimRedMethodList","text":"","code":"dimRedMethodList() #>  [1] \"AutoEncoder\"         \"DiffusionMaps\"       \"DRR\"                 #>  [4] \"FastICA\"             \"KamadaKawai\"         \"DrL\"                 #>  [7] \"FruchtermanReingold\" \"HLLE\"                \"Isomap\"              #> [10] \"kPCA\"                \"PCA_L1\"              \"LaplacianEigenmaps\"  #> [13] \"MDS\"                 \"nMDS\"                \"NNMF\"                #> [16] \"PCA\"                 \"tSNE\"                \"UMAP\""},{"path":"/reference/dimRedResult-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Class ","title":"Class ","text":"class hold results dimensionality reduction.","code":""},{"path":"/reference/dimRedResult-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Class ","text":"","code":"# S4 method for dimRedResult predict(object, xnew)  # S4 method for dimRedResult inverse(object, ynew)  # S4 method for dimRedResult as.data.frame(   x,   org.data.prefix = \"org.\",   meta.prefix = \"meta.\",   data.prefix = \"\" )  # S4 method for dimRedResult getPars(object)  # S4 method for dimRedResult getNDim(object)  # S4 method for dimRedResult print(x)  # S4 method for dimRedResult getOrgData(object)  # S4 method for dimRedResult getDimRedData(object)  # S4 method for dimRedResult ndims(object)  # S4 method for dimRedResult getOtherData(object)"},{"path":"/reference/dimRedResult-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Class ","text":"object class dimRedResult xnew new data, type dimRedData ynew embedded data, type dimRedData x class dimRedResult org.data.prefix Prefix columns org.data slot. meta.prefix Prefix columns x@data@meta. data.prefix Prefix columns x@data@data.","code":""},{"path":"/reference/dimRedResult-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"Class ","text":"predict(dimRedResult): apply trained method new data, work methods, give error apply. cases apply function may approximation. inverse(dimRedResult): inverse transformation embedded data, work methods, give error inverse. cases apply function may approximation. .data.frame(dimRedResult): convert data.frame getPars(dimRedResult): Get parameters method called. getNDim(dimRedResult): Get number embedding dimensions. print(dimRedResult): Method printing. getOrgData(dimRedResult): Get original data meta.data getDimRedData(dimRedResult): Get embedded data ndims(dimRedResult): Extract number embedding dimensions. getOtherData(dimRedResult): Get data produced method","code":""},{"path":"/reference/dimRedResult-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Class ","text":"data Output data class dimRedData. org.data original data, matrix. apply function apply method --sampledata, may exist. inverse function calculate original coordinates reduced space, may exist. .org.data logical, original data included object. .apply logical, forward method exists. .inverse logical inverse method exists. method saves method used. pars saves parameters used. .data data produced method, e.g. distance matrix.","code":""},{"path":"/reference/dimRedResult-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Class ","text":"","code":"## Create object by embedding data iris.pca <- embed(loadDataSet(\"Iris\"), \"PCA\")  ## Convert the result to a data.frame head(as(iris.pca, \"data.frame\")) #>   meta.Species       PC1        PC2 Sepal.Length Sepal.Width Petal.Length #> 1       setosa -2.684126 -0.3193972          5.1         3.5          1.4 #> 2       setosa -2.714142  0.1770012          4.9         3.0          1.4 #> 3       setosa -2.888991  0.1449494          4.7         3.2          1.3 #> 4       setosa -2.745343  0.3182990          4.6         3.1          1.5 #> 5       setosa -2.728717 -0.3267545          5.0         3.6          1.4 #> 6       setosa -2.280860 -0.7413304          5.4         3.9          1.7 #>   Petal.Width #> 1         0.2 #> 2         0.2 #> 3         0.2 #> 4         0.2 #> 5         0.2 #> 6         0.4 head(as.data.frame(iris.pca)) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'head': cannot coerce class ‘structure(\"dimRedResult\", package = \"dimRed\")’ to a data.frame  ## There are no nameclashes to avoid here: head(as.data.frame(iris.pca,                    org.data.prefix = \"\",                    meta.prefix     = \"\",                    data.prefix     = \"\")) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'x' in selecting a method for function 'head': cannot coerce class ‘structure(\"dimRedResult\", package = \"dimRed\")’ to a data.frame  ## Print it more or less nicely: print(iris.pca) #> Method: #> PCA  #> Parameters: #> List of 2 #>  $ center: logi TRUE #>  $ scale.: logi FALSE  ## Get the embedded data as a dimRedData object: getDimRedData(iris.pca) #> An object of class \"dimRedData\" #> Slot \"data\": #>                 PC1          PC2 #>   [1,] -2.684125626 -0.319397247 #>   [2,] -2.714141687  0.177001225 #>   [3,] -2.888990569  0.144949426 #>   [4,] -2.745342856  0.318298979 #>   [5,] -2.728716537 -0.326754513 #>   [6,] -2.280859633 -0.741330449 #>   [7,] -2.820537751  0.089461385 #>   [8,] -2.626144973 -0.163384960 #>   [9,] -2.886382732  0.578311754 #>  [10,] -2.672755798  0.113774246 #>  [11,] -2.506947091 -0.645068899 #>  [12,] -2.612755231 -0.014729939 #>  [13,] -2.786109266  0.235112000 #>  [14,] -3.223803744  0.511394587 #>  [15,] -2.644750390 -1.178764636 #>  [16,] -2.386039034 -1.338062330 #>  [17,] -2.623527875 -0.810679514 #>  [18,] -2.648296706 -0.311849145 #>  [19,] -2.199820324 -0.872839039 #>  [20,] -2.587986400 -0.513560309 #>  [21,] -2.310256215 -0.391345936 #>  [22,] -2.543705229 -0.432996063 #>  [23,] -3.215939416 -0.133468070 #>  [24,] -2.302733182 -0.098708855 #>  [25,] -2.355754049  0.037281860 #>  [26,] -2.506668907  0.146016880 #>  [27,] -2.468820073 -0.130951489 #>  [28,] -2.562319906 -0.367718857 #>  [29,] -2.639534715 -0.312039980 #>  [30,] -2.631989387  0.196961225 #>  [31,] -2.587398477  0.204318491 #>  [32,] -2.409932497 -0.410924264 #>  [33,] -2.648862334 -0.813363820 #>  [34,] -2.598736749 -1.093145759 #>  [35,] -2.636926878  0.121322348 #>  [36,] -2.866241652 -0.069364472 #>  [37,] -2.625238050 -0.599370021 #>  [38,] -2.800684115 -0.268643738 #>  [39,] -2.980502044  0.487958344 #>  [40,] -2.590006314 -0.229043837 #>  [41,] -2.770102426 -0.263527534 #>  [42,] -2.849368705  0.940960574 #>  [43,] -2.997406547  0.341926057 #>  [44,] -2.405614485 -0.188871429 #>  [45,] -2.209489238 -0.436663142 #>  [46,] -2.714451427  0.250208204 #>  [47,] -2.538148259 -0.503771144 #>  [48,] -2.839462168  0.227945569 #>  [49,] -2.543085750 -0.579410022 #>  [50,] -2.703359782 -0.107706082 #>  [51,]  1.284825689 -0.685160470 #>  [52,]  0.932488532 -0.318333638 #>  [53,]  1.464302322 -0.504262815 #>  [54,]  0.183317720  0.827959012 #>  [55,]  1.088103258 -0.074590675 #>  [56,]  0.641669084  0.418246872 #>  [57,]  1.095060663 -0.283468270 #>  [58,] -0.749122670  1.004890961 #>  [59,]  1.044131826 -0.228361900 #>  [60,] -0.008745404  0.723081905 #>  [61,] -0.507840884  1.265971191 #>  [62,]  0.511698557  0.103981235 #>  [63,]  0.264976508  0.550036464 #>  [64,]  0.984934510  0.124817854 #>  [65,] -0.173925372  0.254854209 #>  [66,]  0.927860781 -0.467179494 #>  [67,]  0.660283762  0.352969666 #>  [68,]  0.236104993  0.333610767 #>  [69,]  0.944733728  0.543145551 #>  [70,]  0.045226976  0.583834377 #>  [71,]  1.116283177  0.084616852 #>  [72,]  0.357888418  0.068925032 #>  [73,]  1.298183875  0.327787308 #>  [74,]  0.921728922  0.182737794 #>  [75,]  0.714853326 -0.149055944 #>  [76,]  0.900174373 -0.328504474 #>  [77,]  1.332024437 -0.244440876 #>  [78,]  1.557802155 -0.267495447 #>  [79,]  0.813290650  0.163350301 #>  [80,] -0.305583778  0.368262190 #>  [81,] -0.068126492  0.705172132 #>  [82,] -0.189622472  0.680286764 #>  [83,]  0.136428712  0.314032438 #>  [84,]  1.380026436  0.420954287 #>  [85,]  0.588006443  0.484287420 #>  [86,]  0.806858313 -0.194182315 #>  [87,]  1.220690882 -0.407619594 #>  [88,]  0.815095236  0.372037060 #>  [89,]  0.245957680  0.268524397 #>  [90,]  0.166413217  0.681926725 #>  [91,]  0.464800288  0.670711545 #>  [92,]  0.890815198  0.034464444 #>  [93,]  0.230548024  0.404385848 #>  [94,] -0.704531759  1.012248228 #>  [95,]  0.356981495  0.504910093 #>  [96,]  0.331934480  0.212654684 #>  [97,]  0.376215651  0.293218929 #>  [98,]  0.642576008 -0.017738190 #>  [99,] -0.906469865  0.756093367 #> [100,]  0.299000842  0.348897806 #> [101,]  2.531192728  0.009849109 #> [102,]  1.415235877  0.574916348 #> [103,]  2.616676016 -0.343903151 #> [104,]  1.971531053  0.179727904 #> [105,]  2.350005920  0.040260947 #> [106,]  3.397038736 -0.550836673 #> [107,]  0.521232244  1.192758727 #> [108,]  2.932587069 -0.355500003 #> [109,]  2.321228817  0.243831502 #> [110,]  2.916750967 -0.782791949 #> [111,]  1.661774154 -0.242228408 #> [112,]  1.803401953  0.215637617 #> [113,]  2.165591796 -0.216275585 #> [114,]  1.346163579  0.776818347 #> [115,]  1.585928224  0.539640714 #> [116,]  1.904456375 -0.119250692 #> [117,]  1.949689059 -0.041943260 #> [118,]  3.487055364 -1.175739330 #> [119,]  3.795645422 -0.257322973 #> [120,]  1.300791713  0.761149636 #> [121,]  2.427817913 -0.378196013 #> [122,]  1.199001105  0.606091528 #> [123,]  3.499920039 -0.460674099 #> [124,]  1.388766132  0.204399327 #> [125,]  2.275430504 -0.334990606 #> [126,]  2.614090474 -0.560901355 #> [127,]  1.258508161  0.179704795 #> [128,]  1.291132059  0.116668651 #> [129,]  2.123608723  0.209729477 #> [130,]  2.388003016 -0.464639805 #> [131,]  2.841672778 -0.375269167 #> [132,]  3.230673661 -1.374165087 #> [133,]  2.159437642  0.217277579 #> [134,]  1.444161242  0.143413410 #> [135,]  1.781294810  0.499901681 #> [136,]  3.076499932 -0.688085678 #> [137,]  2.144243314 -0.140064201 #> [138,]  1.905098149 -0.049300526 #> [139,]  1.169326339  0.164990262 #> [140,]  2.107611143 -0.372287872 #> [141,]  2.314154705 -0.183651279 #> [142,]  1.922267801 -0.409203467 #> [143,]  1.415235877  0.574916348 #> [144,]  2.563013375 -0.277862603 #> [145,]  2.418746183 -0.304798198 #> [146,]  1.944109795 -0.187532303 #> [147,]  1.527166615  0.375316983 #> [148,]  1.764345717 -0.078858855 #> [149,]  1.900941614 -0.116627959 #> [150,]  1.390188862  0.282660938 #>  #> Slot \"meta\": #>        Species #> 1       setosa #> 2       setosa #> 3       setosa #> 4       setosa #> 5       setosa #> 6       setosa #> 7       setosa #> 8       setosa #> 9       setosa #> 10      setosa #> 11      setosa #> 12      setosa #> 13      setosa #> 14      setosa #> 15      setosa #> 16      setosa #> 17      setosa #> 18      setosa #> 19      setosa #> 20      setosa #> 21      setosa #> 22      setosa #> 23      setosa #> 24      setosa #> 25      setosa #> 26      setosa #> 27      setosa #> 28      setosa #> 29      setosa #> 30      setosa #> 31      setosa #> 32      setosa #> 33      setosa #> 34      setosa #> 35      setosa #> 36      setosa #> 37      setosa #> 38      setosa #> 39      setosa #> 40      setosa #> 41      setosa #> 42      setosa #> 43      setosa #> 44      setosa #> 45      setosa #> 46      setosa #> 47      setosa #> 48      setosa #> 49      setosa #> 50      setosa #> 51  versicolor #> 52  versicolor #> 53  versicolor #> 54  versicolor #> 55  versicolor #> 56  versicolor #> 57  versicolor #> 58  versicolor #> 59  versicolor #> 60  versicolor #> 61  versicolor #> 62  versicolor #> 63  versicolor #> 64  versicolor #> 65  versicolor #> 66  versicolor #> 67  versicolor #> 68  versicolor #> 69  versicolor #> 70  versicolor #> 71  versicolor #> 72  versicolor #> 73  versicolor #> 74  versicolor #> 75  versicolor #> 76  versicolor #> 77  versicolor #> 78  versicolor #> 79  versicolor #> 80  versicolor #> 81  versicolor #> 82  versicolor #> 83  versicolor #> 84  versicolor #> 85  versicolor #> 86  versicolor #> 87  versicolor #> 88  versicolor #> 89  versicolor #> 90  versicolor #> 91  versicolor #> 92  versicolor #> 93  versicolor #> 94  versicolor #> 95  versicolor #> 96  versicolor #> 97  versicolor #> 98  versicolor #> 99  versicolor #> 100 versicolor #> 101  virginica #> 102  virginica #> 103  virginica #> 104  virginica #> 105  virginica #> 106  virginica #> 107  virginica #> 108  virginica #> 109  virginica #> 110  virginica #> 111  virginica #> 112  virginica #> 113  virginica #> 114  virginica #> 115  virginica #> 116  virginica #> 117  virginica #> 118  virginica #> 119  virginica #> 120  virginica #> 121  virginica #> 122  virginica #> 123  virginica #> 124  virginica #> 125  virginica #> 126  virginica #> 127  virginica #> 128  virginica #> 129  virginica #> 130  virginica #> 131  virginica #> 132  virginica #> 133  virginica #> 134  virginica #> 135  virginica #> 136  virginica #> 137  virginica #> 138  virginica #> 139  virginica #> 140  virginica #> 141  virginica #> 142  virginica #> 143  virginica #> 144  virginica #> 145  virginica #> 146  virginica #> 147  virginica #> 148  virginica #> 149  virginica #> 150  virginica #>   ## Get the original data including meta information: getOrgData(iris.pca) #> An object of class \"dimRedData\" #> Slot \"data\": #>        Sepal.Length Sepal.Width Petal.Length Petal.Width #>   [1,]          5.1         3.5          1.4         0.2 #>   [2,]          4.9         3.0          1.4         0.2 #>   [3,]          4.7         3.2          1.3         0.2 #>   [4,]          4.6         3.1          1.5         0.2 #>   [5,]          5.0         3.6          1.4         0.2 #>   [6,]          5.4         3.9          1.7         0.4 #>   [7,]          4.6         3.4          1.4         0.3 #>   [8,]          5.0         3.4          1.5         0.2 #>   [9,]          4.4         2.9          1.4         0.2 #>  [10,]          4.9         3.1          1.5         0.1 #>  [11,]          5.4         3.7          1.5         0.2 #>  [12,]          4.8         3.4          1.6         0.2 #>  [13,]          4.8         3.0          1.4         0.1 #>  [14,]          4.3         3.0          1.1         0.1 #>  [15,]          5.8         4.0          1.2         0.2 #>  [16,]          5.7         4.4          1.5         0.4 #>  [17,]          5.4         3.9          1.3         0.4 #>  [18,]          5.1         3.5          1.4         0.3 #>  [19,]          5.7         3.8          1.7         0.3 #>  [20,]          5.1         3.8          1.5         0.3 #>  [21,]          5.4         3.4          1.7         0.2 #>  [22,]          5.1         3.7          1.5         0.4 #>  [23,]          4.6         3.6          1.0         0.2 #>  [24,]          5.1         3.3          1.7         0.5 #>  [25,]          4.8         3.4          1.9         0.2 #>  [26,]          5.0         3.0          1.6         0.2 #>  [27,]          5.0         3.4          1.6         0.4 #>  [28,]          5.2         3.5          1.5         0.2 #>  [29,]          5.2         3.4          1.4         0.2 #>  [30,]          4.7         3.2          1.6         0.2 #>  [31,]          4.8         3.1          1.6         0.2 #>  [32,]          5.4         3.4          1.5         0.4 #>  [33,]          5.2         4.1          1.5         0.1 #>  [34,]          5.5         4.2          1.4         0.2 #>  [35,]          4.9         3.1          1.5         0.2 #>  [36,]          5.0         3.2          1.2         0.2 #>  [37,]          5.5         3.5          1.3         0.2 #>  [38,]          4.9         3.6          1.4         0.1 #>  [39,]          4.4         3.0          1.3         0.2 #>  [40,]          5.1         3.4          1.5         0.2 #>  [41,]          5.0         3.5          1.3         0.3 #>  [42,]          4.5         2.3          1.3         0.3 #>  [43,]          4.4         3.2          1.3         0.2 #>  [44,]          5.0         3.5          1.6         0.6 #>  [45,]          5.1         3.8          1.9         0.4 #>  [46,]          4.8         3.0          1.4         0.3 #>  [47,]          5.1         3.8          1.6         0.2 #>  [48,]          4.6         3.2          1.4         0.2 #>  [49,]          5.3         3.7          1.5         0.2 #>  [50,]          5.0         3.3          1.4         0.2 #>  [51,]          7.0         3.2          4.7         1.4 #>  [52,]          6.4         3.2          4.5         1.5 #>  [53,]          6.9         3.1          4.9         1.5 #>  [54,]          5.5         2.3          4.0         1.3 #>  [55,]          6.5         2.8          4.6         1.5 #>  [56,]          5.7         2.8          4.5         1.3 #>  [57,]          6.3         3.3          4.7         1.6 #>  [58,]          4.9         2.4          3.3         1.0 #>  [59,]          6.6         2.9          4.6         1.3 #>  [60,]          5.2         2.7          3.9         1.4 #>  [61,]          5.0         2.0          3.5         1.0 #>  [62,]          5.9         3.0          4.2         1.5 #>  [63,]          6.0         2.2          4.0         1.0 #>  [64,]          6.1         2.9          4.7         1.4 #>  [65,]          5.6         2.9          3.6         1.3 #>  [66,]          6.7         3.1          4.4         1.4 #>  [67,]          5.6         3.0          4.5         1.5 #>  [68,]          5.8         2.7          4.1         1.0 #>  [69,]          6.2         2.2          4.5         1.5 #>  [70,]          5.6         2.5          3.9         1.1 #>  [71,]          5.9         3.2          4.8         1.8 #>  [72,]          6.1         2.8          4.0         1.3 #>  [73,]          6.3         2.5          4.9         1.5 #>  [74,]          6.1         2.8          4.7         1.2 #>  [75,]          6.4         2.9          4.3         1.3 #>  [76,]          6.6         3.0          4.4         1.4 #>  [77,]          6.8         2.8          4.8         1.4 #>  [78,]          6.7         3.0          5.0         1.7 #>  [79,]          6.0         2.9          4.5         1.5 #>  [80,]          5.7         2.6          3.5         1.0 #>  [81,]          5.5         2.4          3.8         1.1 #>  [82,]          5.5         2.4          3.7         1.0 #>  [83,]          5.8         2.7          3.9         1.2 #>  [84,]          6.0         2.7          5.1         1.6 #>  [85,]          5.4         3.0          4.5         1.5 #>  [86,]          6.0         3.4          4.5         1.6 #>  [87,]          6.7         3.1          4.7         1.5 #>  [88,]          6.3         2.3          4.4         1.3 #>  [89,]          5.6         3.0          4.1         1.3 #>  [90,]          5.5         2.5          4.0         1.3 #>  [91,]          5.5         2.6          4.4         1.2 #>  [92,]          6.1         3.0          4.6         1.4 #>  [93,]          5.8         2.6          4.0         1.2 #>  [94,]          5.0         2.3          3.3         1.0 #>  [95,]          5.6         2.7          4.2         1.3 #>  [96,]          5.7         3.0          4.2         1.2 #>  [97,]          5.7         2.9          4.2         1.3 #>  [98,]          6.2         2.9          4.3         1.3 #>  [99,]          5.1         2.5          3.0         1.1 #> [100,]          5.7         2.8          4.1         1.3 #> [101,]          6.3         3.3          6.0         2.5 #> [102,]          5.8         2.7          5.1         1.9 #> [103,]          7.1         3.0          5.9         2.1 #> [104,]          6.3         2.9          5.6         1.8 #> [105,]          6.5         3.0          5.8         2.2 #> [106,]          7.6         3.0          6.6         2.1 #> [107,]          4.9         2.5          4.5         1.7 #> [108,]          7.3         2.9          6.3         1.8 #> [109,]          6.7         2.5          5.8         1.8 #> [110,]          7.2         3.6          6.1         2.5 #> [111,]          6.5         3.2          5.1         2.0 #> [112,]          6.4         2.7          5.3         1.9 #> [113,]          6.8         3.0          5.5         2.1 #> [114,]          5.7         2.5          5.0         2.0 #> [115,]          5.8         2.8          5.1         2.4 #> [116,]          6.4         3.2          5.3         2.3 #> [117,]          6.5         3.0          5.5         1.8 #> [118,]          7.7         3.8          6.7         2.2 #> [119,]          7.7         2.6          6.9         2.3 #> [120,]          6.0         2.2          5.0         1.5 #> [121,]          6.9         3.2          5.7         2.3 #> [122,]          5.6         2.8          4.9         2.0 #> [123,]          7.7         2.8          6.7         2.0 #> [124,]          6.3         2.7          4.9         1.8 #> [125,]          6.7         3.3          5.7         2.1 #> [126,]          7.2         3.2          6.0         1.8 #> [127,]          6.2         2.8          4.8         1.8 #> [128,]          6.1         3.0          4.9         1.8 #> [129,]          6.4         2.8          5.6         2.1 #> [130,]          7.2         3.0          5.8         1.6 #> [131,]          7.4         2.8          6.1         1.9 #> [132,]          7.9         3.8          6.4         2.0 #> [133,]          6.4         2.8          5.6         2.2 #> [134,]          6.3         2.8          5.1         1.5 #> [135,]          6.1         2.6          5.6         1.4 #> [136,]          7.7         3.0          6.1         2.3 #> [137,]          6.3         3.4          5.6         2.4 #> [138,]          6.4         3.1          5.5         1.8 #> [139,]          6.0         3.0          4.8         1.8 #> [140,]          6.9         3.1          5.4         2.1 #> [141,]          6.7         3.1          5.6         2.4 #> [142,]          6.9         3.1          5.1         2.3 #> [143,]          5.8         2.7          5.1         1.9 #> [144,]          6.8         3.2          5.9         2.3 #> [145,]          6.7         3.3          5.7         2.5 #> [146,]          6.7         3.0          5.2         2.3 #> [147,]          6.3         2.5          5.0         1.9 #> [148,]          6.5         3.0          5.2         2.0 #> [149,]          6.2         3.4          5.4         2.3 #> [150,]          5.9         3.0          5.1         1.8 #>  #> Slot \"meta\": #>        Species #> 1       setosa #> 2       setosa #> 3       setosa #> 4       setosa #> 5       setosa #> 6       setosa #> 7       setosa #> 8       setosa #> 9       setosa #> 10      setosa #> 11      setosa #> 12      setosa #> 13      setosa #> 14      setosa #> 15      setosa #> 16      setosa #> 17      setosa #> 18      setosa #> 19      setosa #> 20      setosa #> 21      setosa #> 22      setosa #> 23      setosa #> 24      setosa #> 25      setosa #> 26      setosa #> 27      setosa #> 28      setosa #> 29      setosa #> 30      setosa #> 31      setosa #> 32      setosa #> 33      setosa #> 34      setosa #> 35      setosa #> 36      setosa #> 37      setosa #> 38      setosa #> 39      setosa #> 40      setosa #> 41      setosa #> 42      setosa #> 43      setosa #> 44      setosa #> 45      setosa #> 46      setosa #> 47      setosa #> 48      setosa #> 49      setosa #> 50      setosa #> 51  versicolor #> 52  versicolor #> 53  versicolor #> 54  versicolor #> 55  versicolor #> 56  versicolor #> 57  versicolor #> 58  versicolor #> 59  versicolor #> 60  versicolor #> 61  versicolor #> 62  versicolor #> 63  versicolor #> 64  versicolor #> 65  versicolor #> 66  versicolor #> 67  versicolor #> 68  versicolor #> 69  versicolor #> 70  versicolor #> 71  versicolor #> 72  versicolor #> 73  versicolor #> 74  versicolor #> 75  versicolor #> 76  versicolor #> 77  versicolor #> 78  versicolor #> 79  versicolor #> 80  versicolor #> 81  versicolor #> 82  versicolor #> 83  versicolor #> 84  versicolor #> 85  versicolor #> 86  versicolor #> 87  versicolor #> 88  versicolor #> 89  versicolor #> 90  versicolor #> 91  versicolor #> 92  versicolor #> 93  versicolor #> 94  versicolor #> 95  versicolor #> 96  versicolor #> 97  versicolor #> 98  versicolor #> 99  versicolor #> 100 versicolor #> 101  virginica #> 102  virginica #> 103  virginica #> 104  virginica #> 105  virginica #> 106  virginica #> 107  virginica #> 108  virginica #> 109  virginica #> 110  virginica #> 111  virginica #> 112  virginica #> 113  virginica #> 114  virginica #> 115  virginica #> 116  virginica #> 117  virginica #> 118  virginica #> 119  virginica #> 120  virginica #> 121  virginica #> 122  virginica #> 123  virginica #> 124  virginica #> 125  virginica #> 126  virginica #> 127  virginica #> 128  virginica #> 129  virginica #> 130  virginica #> 131  virginica #> 132  virginica #> 133  virginica #> 134  virginica #> 135  virginica #> 136  virginica #> 137  virginica #> 138  virginica #> 139  virginica #> 140  virginica #> 141  virginica #> 142  virginica #> 143  virginica #> 144  virginica #> 145  virginica #> 146  virginica #> 147  virginica #> 148  virginica #> 149  virginica #> 150  virginica #>   ## Get the number of variables: ndims(iris.pca) #> [1] 2"},{"path":"/reference/distance_correlation-dimRedResult-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method distance_correlation — distance_correlation,dimRedResult-method","title":"Method distance_correlation — distance_correlation,dimRedResult-method","text":"Calculate distance correlation distance matrices high low dimensioal space.","code":""},{"path":"/reference/distance_correlation-dimRedResult-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method distance_correlation — distance_correlation,dimRedResult-method","text":"","code":"# S4 method for dimRedResult distance_correlation(object)"},{"path":"/reference/distance_correlation-dimRedResult-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method distance_correlation — distance_correlation,dimRedResult-method","text":"object class dimRedResult","code":""},{"path":[]},{"path":"/reference/embed.html","id":null,"dir":"Reference","previous_headings":"","what":"dispatches the different methods for dimensionality reduction — embed","title":"dispatches the different methods for dimensionality reduction — embed","text":"wraps around dimensionality reduction functions.","code":""},{"path":"/reference/embed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"dispatches the different methods for dimensionality reduction — embed","text":"","code":"embed(.data, ...)  # S4 method for formula embed(   .formula,   .data,   .method = dimRedMethodList(),   .mute = character(0),   .keep.org.data = TRUE,   ... )  # S4 method for ANY embed(   .data,   .method = dimRedMethodList(),   .mute = character(0),   .keep.org.data = TRUE,   ... )  # S4 method for dimRedData embed(   .data,   .method = dimRedMethodList(),   .mute = character(0),   .keep.org.data = TRUE,   ... )"},{"path":"/reference/embed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"dispatches the different methods for dimensionality reduction — embed","text":".data object class dimRedData, converted class dimRedData necessary; see examples details. ... parameters, internally passed list dimensionality reduction method pars = list(...) .formula formula, see .dimRedData. .method character vector naming one dimensionality reduction techniques. .mute character vector containing elements want mute (c(\"message\", \"output\")), defaults character(0). .keep.org.data TRUE/FALSE keep original data.","code":""},{"path":"/reference/embed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"dispatches the different methods for dimensionality reduction — embed","text":"object class dimRedResult","code":""},{"path":"/reference/embed.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"dispatches the different methods for dimensionality reduction — embed","text":"Method must one dimRedMethodList(), partial matching performed. parameters start dot, avoid clashes partial argument matching (see R manual section 4.3.2), ever occur clashes arguments, call function arguments named, e.g. embed(.data = dat, .method = \"mymethod\", .d = \"parameter\").","code":""},{"path":"/reference/embed.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"dispatches the different methods for dimensionality reduction — embed","text":"embed(formula): embed data.frame using formula. embed(): Embed anything long can coerced dimRedData. embed(dimRedData): Embed dimRedData object","code":""},{"path":"/reference/embed.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"dispatches the different methods for dimensionality reduction — embed","text":"","code":"## embed a data.frame using a formula: as.data.frame(   embed(Species ~ Sepal.Length + Sepal.Width + Petal.Length + Petal.Width,         iris, \"PCA\") ) #> Error in as.data.frame.default(embed(Species ~ Sepal.Length + Sepal.Width +     Petal.Length + Petal.Width, iris, \"PCA\")): cannot coerce class ‘structure(\"dimRedResult\", package = \"dimRed\")’ to a data.frame  ## embed a data.frame and return a data.frame as.data.frame(embed(iris[, 1:4], \"PCA\")) #> Error in as.data.frame.default(embed(iris[, 1:4], \"PCA\")): cannot coerce class ‘structure(\"dimRedResult\", package = \"dimRed\")’ to a data.frame  ## embed a matrix and return a data.frame as.data.frame(embed(as.matrix(iris[, 1:4]), \"PCA\")) #> Error in as.data.frame.default(embed(as.matrix(iris[, 1:4]), \"PCA\")): cannot coerce class ‘structure(\"dimRedResult\", package = \"dimRed\")’ to a data.frame  if (FALSE) { ## embed dimRedData objects embed_methods <- dimRedMethodList() quality_methods <- dimRedQualityList() dataset <- loadDataSet(\"Iris\")  quality_results <- matrix(NA, length(embed_methods), length(quality_methods),                               dimnames = list(embed_methods, quality_methods)) embedded_data <- list()  for (e in embed_methods) {   message(\"embedding: \", e)   embedded_data[[e]] <- embed(dataset, e, .mute = c(\"message\", \"output\"))   for (q in quality_methods) {     message(\"  quality: \", q)     quality_results[e, q] <- tryCatch(       quality(embedded_data[[e]], q),       error = function(e) NA     )   } }  print(quality_results) }"},{"path":"/reference/getData.html","id":null,"dir":"Reference","previous_headings":"","what":"Method getData — getData","title":"Method getData — getData","text":"Extracts data slot.","code":""},{"path":"/reference/getData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method getData — getData","text":"","code":"getData(object)"},{"path":"/reference/getData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method getData — getData","text":"object object converted.","code":""},{"path":"/reference/getDimRedData.html","id":null,"dir":"Reference","previous_headings":"","what":"Method getDimRedData — getDimRedData","title":"Method getDimRedData — getDimRedData","text":"Extract dimRedData.","code":""},{"path":"/reference/getDimRedData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method getDimRedData — getDimRedData","text":"","code":"getDimRedData(object, ...)"},{"path":"/reference/getDimRedData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method getDimRedData — getDimRedData","text":"object object extract data . ... arguments.","code":""},{"path":"/reference/getMeta.html","id":null,"dir":"Reference","previous_headings":"","what":"Method getMeta — getMeta","title":"Method getMeta — getMeta","text":"Extracts meta slot.","code":""},{"path":"/reference/getMeta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method getMeta — getMeta","text":"","code":"getMeta(object, ...)"},{"path":"/reference/getMeta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method getMeta — getMeta","text":"object object converted. ... arguments.","code":""},{"path":"/reference/getNDim.html","id":null,"dir":"Reference","previous_headings":"","what":"Method getNDim — getNDim","title":"Method getNDim — getNDim","text":"Extract number embedding dimensions.","code":""},{"path":"/reference/getNDim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method getNDim — getNDim","text":"","code":"getNDim(object, ...)"},{"path":"/reference/getNDim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method getNDim — getNDim","text":"object object get dimensions . ... arguments.","code":""},{"path":"/reference/getOrgData.html","id":null,"dir":"Reference","previous_headings":"","what":"Method getOrgData — getOrgData","title":"Method getOrgData — getOrgData","text":"Extract Original data.","code":""},{"path":"/reference/getOrgData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method getOrgData — getOrgData","text":"","code":"getOrgData(object, ...)"},{"path":"/reference/getOrgData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method getOrgData — getOrgData","text":"object object extract data . ... arguments.","code":""},{"path":"/reference/getOtherData.html","id":null,"dir":"Reference","previous_headings":"","what":"Method getOtherData — getOtherData","title":"Method getOtherData — getOtherData","text":"Extract data produced dimRedMethod","code":""},{"path":"/reference/getOtherData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method getOtherData — getOtherData","text":"","code":"getOtherData(object, ...)"},{"path":"/reference/getOtherData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method getOtherData — getOtherData","text":"object object extract data . ... arguments.","code":""},{"path":"/reference/getPars.html","id":null,"dir":"Reference","previous_headings":"","what":"Method getPars — getPars","title":"Method getPars — getPars","text":"Extracts pars slot.","code":""},{"path":"/reference/getPars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method getPars — getPars","text":"","code":"getPars(object, ...)"},{"path":"/reference/getPars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method getPars — getPars","text":"object object converted. ... arguments.","code":""},{"path":"/reference/getRotationMatrix.html","id":null,"dir":"Reference","previous_headings":"","what":"getRotationMatrix — getRotationMatrix","title":"getRotationMatrix — getRotationMatrix","text":"Extract rotation matrix dimRedResult objects derived PCA FastICA","code":""},{"path":"/reference/getRotationMatrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getRotationMatrix — getRotationMatrix","text":"","code":"getRotationMatrix(x)"},{"path":"/reference/getRotationMatrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getRotationMatrix — getRotationMatrix","text":"x type dimRedResult","code":""},{"path":"/reference/getRotationMatrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"getRotationMatrix — getRotationMatrix","text":"matrix","code":""},{"path":"/reference/getRotationMatrix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"getRotationMatrix — getRotationMatrix","text":"data pre-processed way method , e.g. centering /scaling.","code":""},{"path":"/reference/getRotationMatrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getRotationMatrix — getRotationMatrix","text":"","code":"dat <- loadDataSet(\"Iris\")  pca <- embed(dat, \"PCA\") rot_pca <- getRotationMatrix(pca) scale(getData(dat), TRUE, FALSE) %*% rot_pca - getData(getDimRedData(pca)) #>        PC1 PC2 #>   [1,]   0   0 #>   [2,]   0   0 #>   [3,]   0   0 #>   [4,]   0   0 #>   [5,]   0   0 #>   [6,]   0   0 #>   [7,]   0   0 #>   [8,]   0   0 #>   [9,]   0   0 #>  [10,]   0   0 #>  [11,]   0   0 #>  [12,]   0   0 #>  [13,]   0   0 #>  [14,]   0   0 #>  [15,]   0   0 #>  [16,]   0   0 #>  [17,]   0   0 #>  [18,]   0   0 #>  [19,]   0   0 #>  [20,]   0   0 #>  [21,]   0   0 #>  [22,]   0   0 #>  [23,]   0   0 #>  [24,]   0   0 #>  [25,]   0   0 #>  [26,]   0   0 #>  [27,]   0   0 #>  [28,]   0   0 #>  [29,]   0   0 #>  [30,]   0   0 #>  [31,]   0   0 #>  [32,]   0   0 #>  [33,]   0   0 #>  [34,]   0   0 #>  [35,]   0   0 #>  [36,]   0   0 #>  [37,]   0   0 #>  [38,]   0   0 #>  [39,]   0   0 #>  [40,]   0   0 #>  [41,]   0   0 #>  [42,]   0   0 #>  [43,]   0   0 #>  [44,]   0   0 #>  [45,]   0   0 #>  [46,]   0   0 #>  [47,]   0   0 #>  [48,]   0   0 #>  [49,]   0   0 #>  [50,]   0   0 #>  [51,]   0   0 #>  [52,]   0   0 #>  [53,]   0   0 #>  [54,]   0   0 #>  [55,]   0   0 #>  [56,]   0   0 #>  [57,]   0   0 #>  [58,]   0   0 #>  [59,]   0   0 #>  [60,]   0   0 #>  [61,]   0   0 #>  [62,]   0   0 #>  [63,]   0   0 #>  [64,]   0   0 #>  [65,]   0   0 #>  [66,]   0   0 #>  [67,]   0   0 #>  [68,]   0   0 #>  [69,]   0   0 #>  [70,]   0   0 #>  [71,]   0   0 #>  [72,]   0   0 #>  [73,]   0   0 #>  [74,]   0   0 #>  [75,]   0   0 #>  [76,]   0   0 #>  [77,]   0   0 #>  [78,]   0   0 #>  [79,]   0   0 #>  [80,]   0   0 #>  [81,]   0   0 #>  [82,]   0   0 #>  [83,]   0   0 #>  [84,]   0   0 #>  [85,]   0   0 #>  [86,]   0   0 #>  [87,]   0   0 #>  [88,]   0   0 #>  [89,]   0   0 #>  [90,]   0   0 #>  [91,]   0   0 #>  [92,]   0   0 #>  [93,]   0   0 #>  [94,]   0   0 #>  [95,]   0   0 #>  [96,]   0   0 #>  [97,]   0   0 #>  [98,]   0   0 #>  [99,]   0   0 #> [100,]   0   0 #> [101,]   0   0 #> [102,]   0   0 #> [103,]   0   0 #> [104,]   0   0 #> [105,]   0   0 #> [106,]   0   0 #> [107,]   0   0 #> [108,]   0   0 #> [109,]   0   0 #> [110,]   0   0 #> [111,]   0   0 #> [112,]   0   0 #> [113,]   0   0 #> [114,]   0   0 #> [115,]   0   0 #> [116,]   0   0 #> [117,]   0   0 #> [118,]   0   0 #> [119,]   0   0 #> [120,]   0   0 #> [121,]   0   0 #> [122,]   0   0 #> [123,]   0   0 #> [124,]   0   0 #> [125,]   0   0 #> [126,]   0   0 #> [127,]   0   0 #> [128,]   0   0 #> [129,]   0   0 #> [130,]   0   0 #> [131,]   0   0 #> [132,]   0   0 #> [133,]   0   0 #> [134,]   0   0 #> [135,]   0   0 #> [136,]   0   0 #> [137,]   0   0 #> [138,]   0   0 #> [139,]   0   0 #> [140,]   0   0 #> [141,]   0   0 #> [142,]   0   0 #> [143,]   0   0 #> [144,]   0   0 #> [145,]   0   0 #> [146,]   0   0 #> [147,]   0   0 #> [148,]   0   0 #> [149,]   0   0 #> [150,]   0   0   if(requireNamespace(\"fastICA\", quietly = TRUE)) {   ica <- embed(dat, \"FastICA\")   rot_ica <- getRotationMatrix(ica)   scale(getData(dat), TRUE, FALSE) %*% rot_ica - getData(getDimRedData(ica)) } #>                 ICA1          ICA2 #>   [1,]  1.110223e-16 -4.440892e-16 #>   [2,]  1.110223e-16 -6.661338e-16 #>   [3,] -5.551115e-17 -8.881784e-16 #>   [4,]  2.220446e-16 -4.440892e-16 #>   [5,]  2.220446e-16 -6.661338e-16 #>   [6,]  4.440892e-16 -4.440892e-16 #>   [7,]  1.665335e-16 -4.440892e-16 #>   [8,]  2.498002e-16 -4.440892e-16 #>   [9,]  0.000000e+00 -4.440892e-16 #>  [10,]  2.220446e-16 -6.661338e-16 #>  [11,]  2.220446e-16 -4.440892e-16 #>  [12,]  2.220446e-16 -4.440892e-16 #>  [13,]  1.110223e-16 -8.881784e-16 #>  [14,]  2.220446e-16 -6.661338e-16 #>  [15,]  4.440892e-16 -2.220446e-16 #>  [16,]  0.000000e+00 -8.881784e-16 #>  [17,]  2.220446e-16 -8.881784e-16 #>  [18,]  1.665335e-16 -4.440892e-16 #>  [19,]  4.440892e-16 -2.220446e-16 #>  [20,]  1.110223e-16 -4.440892e-16 #>  [21,]  4.440892e-16 -2.220446e-16 #>  [22,]  1.110223e-16 -6.661338e-16 #>  [23,]  1.249001e-16 -6.661338e-16 #>  [24,]  2.636780e-16 -4.440892e-16 #>  [25,]  1.942890e-16 -4.440892e-16 #>  [26,]  5.551115e-17 -4.440892e-16 #>  [27,]  2.498002e-16 -6.661338e-16 #>  [28,]  2.220446e-16 -6.661338e-16 #>  [29,]  2.220446e-16 -4.440892e-16 #>  [30,]  1.110223e-16 -4.440892e-16 #>  [31,]  1.110223e-16 -6.661338e-16 #>  [32,]  2.220446e-16 -8.881784e-16 #>  [33,]  2.220446e-16 -6.661338e-16 #>  [34,]  4.440892e-16 -6.661338e-16 #>  [35,]  1.665335e-16 -4.440892e-16 #>  [36,]  2.567391e-16 -2.220446e-16 #>  [37,]  0.000000e+00 -6.661338e-16 #>  [38,]  1.665335e-16 -8.881784e-16 #>  [39,]  0.000000e+00 -6.661338e-16 #>  [40,]  1.665335e-16 -4.440892e-16 #>  [41,]  5.551115e-17 -6.661338e-16 #>  [42,]  0.000000e+00 -6.661338e-16 #>  [43,]  0.000000e+00 -8.881784e-16 #>  [44,]  1.110223e-16 -4.440892e-16 #>  [45,]  1.110223e-16 -8.881784e-16 #>  [46,]  0.000000e+00 -6.661338e-16 #>  [47,]  1.110223e-16 -4.440892e-16 #>  [48,]  1.110223e-16 -4.440892e-16 #>  [49,]  2.220446e-16 -4.440892e-16 #>  [50,]  1.249001e-16 -4.440892e-16 #>  [51,]  2.220446e-16 -6.106227e-16 #>  [52,]  1.110223e-16 -6.106227e-16 #>  [53,]  0.000000e+00 -5.551115e-16 #>  [54,]  2.220446e-16 -6.106227e-16 #>  [55,]  1.387779e-16 -5.551115e-16 #>  [56,]  1.110223e-16 -6.106227e-16 #>  [57,]  3.330669e-16 -6.106227e-16 #>  [58,]  0.000000e+00 -6.106227e-16 #>  [59,]  3.330669e-16 -6.106227e-16 #>  [60,]  4.440892e-16 -5.828671e-16 #>  [61,]  0.000000e+00 -5.967449e-16 #>  [62,]  2.498002e-16 -6.106227e-16 #>  [63,]  2.220446e-16 -6.106227e-16 #>  [64,]  2.498002e-16 -5.551115e-16 #>  [65,]  3.330669e-16 -5.967449e-16 #>  [66,]  1.110223e-16 -6.106227e-16 #>  [67,]  1.110223e-16 -6.106227e-16 #>  [68,]  2.220446e-16 -6.106227e-16 #>  [69,]  2.220446e-16 -5.551115e-16 #>  [70,]  4.440892e-16 -6.106227e-16 #>  [71,]  2.359224e-16 -5.551115e-16 #>  [72,]  2.359224e-16 -6.106227e-16 #>  [73,]  1.110223e-16 -6.661338e-16 #>  [74,]  2.220446e-16 -5.551115e-16 #>  [75,]  3.885781e-16 -6.106227e-16 #>  [76,]  2.220446e-16 -6.106227e-16 #>  [77,]  1.110223e-16 -6.661338e-16 #>  [78,]  1.110223e-16 -6.661338e-16 #>  [79,]  2.220446e-16 -6.106227e-16 #>  [80,]  3.330669e-16 -5.828671e-16 #>  [81,]  4.440892e-16 -5.967449e-16 #>  [82,]  4.440892e-16 -5.967449e-16 #>  [83,]  2.220446e-16 -5.828671e-16 #>  [84,]  1.110223e-16 -5.551115e-16 #>  [85,]  1.110223e-16 -6.106227e-16 #>  [86,]  1.665335e-16 -6.106227e-16 #>  [87,]  1.110223e-16 -6.661338e-16 #>  [88,]  3.330669e-16 -6.106227e-16 #>  [89,]  2.220446e-16 -6.106227e-16 #>  [90,]  0.000000e+00 -6.106227e-16 #>  [91,]  0.000000e+00 -5.551115e-16 #>  [92,]  2.359224e-16 -6.106227e-16 #>  [93,]  2.220446e-16 -5.828671e-16 #>  [94,]  0.000000e+00 -5.967449e-16 #>  [95,]  2.220446e-16 -6.106227e-16 #>  [96,]  1.665335e-16 -5.828671e-16 #>  [97,]  2.220446e-16 -6.106227e-16 #>  [98,]  1.804112e-16 -6.106227e-16 #>  [99,]  2.220446e-16 -5.551115e-16 #> [100,]  1.110223e-16 -6.106227e-16 #> [101,]  2.636780e-16 -6.661338e-16 #> [102,]  2.220446e-16 -4.440892e-16 #> [103,]  1.110223e-16 -6.661338e-16 #> [104,]  2.775558e-16 -5.551115e-16 #> [105,]  1.179612e-16 -6.661338e-16 #> [106,] -4.440892e-16 -4.440892e-16 #> [107,]  4.440892e-16 -6.661338e-16 #> [108,]  2.220446e-16 -4.440892e-16 #> [109,]  1.110223e-16 -6.661338e-16 #> [110,]  0.000000e+00 -6.661338e-16 #> [111,]  1.110223e-16 -6.661338e-16 #> [112,]  2.775558e-16 -5.551115e-16 #> [113,]  2.220446e-16 -6.661338e-16 #> [114,]  0.000000e+00 -6.661338e-16 #> [115,]  2.220446e-16 -5.551115e-16 #> [116,]  2.220446e-16 -5.551115e-16 #> [117,]  1.110223e-16 -6.661338e-16 #> [118,]  0.000000e+00 -4.440892e-16 #> [119,]  3.330669e-16 -6.661338e-16 #> [120,]  2.220446e-16 -5.551115e-16 #> [121,]  1.110223e-16 -6.661338e-16 #> [122,]  2.220446e-16 -5.551115e-16 #> [123,]  0.000000e+00 -6.661338e-16 #> [124,]  2.220446e-16 -6.661338e-16 #> [125,]  1.110223e-16 -4.440892e-16 #> [126,]  0.000000e+00 -4.440892e-16 #> [127,]  1.665335e-16 -6.661338e-16 #> [128,]  2.220446e-16 -5.551115e-16 #> [129,]  2.220446e-16 -4.440892e-16 #> [130,]  2.220446e-16 -6.661338e-16 #> [131,]  3.330669e-16 -4.440892e-16 #> [132,] -4.440892e-16 -6.661338e-16 #> [133,]  2.220446e-16 -4.440892e-16 #> [134,]  2.775558e-16 -5.551115e-16 #> [135,]  3.330669e-16 -5.551115e-16 #> [136,]  0.000000e+00 -4.440892e-16 #> [137,]  1.110223e-16 -6.661338e-16 #> [138,]  2.220446e-16 -6.661338e-16 #> [139,]  2.220446e-16 -5.551115e-16 #> [140,]  1.110223e-16 -6.661338e-16 #> [141,]  1.110223e-16 -6.661338e-16 #> [142,]  1.110223e-16 -5.551115e-16 #> [143,]  2.220446e-16 -4.440892e-16 #> [144,]  1.110223e-16 -6.661338e-16 #> [145,]  1.110223e-16 -4.440892e-16 #> [146,]  1.665335e-16 -5.551115e-16 #> [147,]  3.330669e-16 -5.551115e-16 #> [148,]  1.110223e-16 -5.551115e-16 #> [149,]  1.665335e-16 -6.661338e-16 #> [150,]  2.220446e-16 -6.661338e-16"},{"path":"/reference/installSuggests.html","id":null,"dir":"Reference","previous_headings":"","what":"getSuggests — installSuggests","title":"getSuggests — installSuggests","text":"Install packages wich suggested dimRed.","code":""},{"path":"/reference/installSuggests.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"getSuggests — installSuggests","text":"","code":"installSuggests(...)"},{"path":"/reference/installSuggests.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"getSuggests — installSuggests","text":"... additional options passed install.packages.","code":""},{"path":"/reference/installSuggests.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"getSuggests — installSuggests","text":"default dimRed install dependencies, quite lot case available platform able install dimRed without problems. solve provide function automatically installes suggested packages.","code":""},{"path":"/reference/installSuggests.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"getSuggests — installSuggests","text":"","code":"if (FALSE) { installSuggests() }"},{"path":"/reference/kPCA-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Kernel PCA — kPCA-class","title":"Kernel PCA — kPCA-class","text":"S4 Class implementing Kernel PCA","code":""},{"path":"/reference/kPCA-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kernel PCA — kPCA-class","text":"Kernel PCA nonlinear extension PCA using kernel methods.","code":""},{"path":"/reference/kPCA-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Kernel PCA — kPCA-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/kPCA-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"Kernel PCA — kPCA-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/kPCA-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Kernel PCA — kPCA-class","text":"Kernel PCA can take following parameters: ndim number output dimensions, defaults 2 kernel kernel function, either function   character vector name kernel. Defaults   \"rbfdot\" kpar list parameters kernel function,     defaults list(sigma = 0.1) comprehensive collection kernel functions can found kpca. case function take parameters kpar empty list.","code":""},{"path":"/reference/kPCA-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Kernel PCA — kPCA-class","text":"Wraps around kpca, provides additionally forward backward projections.","code":""},{"path":"/reference/kPCA-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Kernel PCA — kPCA-class","text":"Sch\\\"olkopf, B., Smola, ., M\\\"uller, K.-R., 1998. Nonlinear Component Analysis Kernel Eigenvalue Problem. Neural Computation 10, 1299-1319. https://doi.org/10.1162/089976698300017467","code":""},{"path":[]},{"path":"/reference/kPCA-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kernel PCA — kPCA-class","text":"","code":"if (FALSE) { if(requireNamespace(\"kernlab\", quietly = TRUE)) {  dat <- loadDataSet(\"3D S Curve\") emb <- embed(dat, \"kPCA\") plot(emb, type = \"2vars\") }  }"},{"path":"/reference/makeKNNgraph.html","id":null,"dir":"Reference","previous_headings":"","what":"makeKNNgraph — makeKNNgraph","title":"makeKNNgraph — makeKNNgraph","text":"Create K-nearest neighbor graph data x. Uses nn2 fast way find neares neighbors.","code":""},{"path":"/reference/makeKNNgraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"makeKNNgraph — makeKNNgraph","text":"","code":"makeKNNgraph(x, k, eps = 0, diag = FALSE)"},{"path":"/reference/makeKNNgraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"makeKNNgraph — makeKNNgraph","text":"x data, matrix, observations rows, dimensions columns k number nearest neighbors. eps number, eps > 0 KNN search approximate, see nn2 diag logical, TRUE every edge returned graph edge weight 0 .","code":""},{"path":"/reference/makeKNNgraph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"makeKNNgraph — makeKNNgraph","text":"object type igraph edge     weight distances.","code":""},{"path":"/reference/maximize_correlation-dimRedResult-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximize Correlation with the Axes — maximize_correlation,dimRedResult-method","title":"Maximize Correlation with the Axes — maximize_correlation,dimRedResult-method","text":"Rotates data way correlation first naxes axes maximized.","code":""},{"path":"/reference/maximize_correlation-dimRedResult-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximize Correlation with the Axes — maximize_correlation,dimRedResult-method","text":"","code":"# S4 method for dimRedResult maximize_correlation(   object,   naxes = ncol(object@data@data),   cor_method = \"pearson\" )"},{"path":"/reference/maximize_correlation-dimRedResult-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximize Correlation with the Axes — maximize_correlation,dimRedResult-method","text":"object dimRedResult object naxes number axes optimize . cor_method correlation method use","code":""},{"path":"/reference/maximize_correlation-dimRedResult-method.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Maximize Correlation with the Axes — maximize_correlation,dimRedResult-method","text":"Methods use eigenvector decomposition, like t-SNE often align data axes according correlation variables data. maximize_correlation uses optimx package rotate data way original variables maximum correlation embedding axes.","code":""},{"path":"/reference/mean_R_NX-dimRedResult-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method mean_R_NX — mean_R_NX,dimRedResult-method","title":"Method mean_R_NX — mean_R_NX,dimRedResult-method","text":"Calculate mean_R_NX score assess quality dimensionality reduction.","code":""},{"path":"/reference/mean_R_NX-dimRedResult-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method mean_R_NX — mean_R_NX,dimRedResult-method","text":"","code":"# S4 method for dimRedResult mean_R_NX(object)"},{"path":"/reference/mean_R_NX-dimRedResult-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method mean_R_NX — mean_R_NX,dimRedResult-method","text":"object class dimRedResult","code":""},{"path":[]},{"path":"/reference/mixColorRamps.html","id":null,"dir":"Reference","previous_headings":"","what":"Mixing color ramps — mixColorRamps","title":"Mixing color ramps — mixColorRamps","text":"mix different color ramps","code":""},{"path":"/reference/mixColorRamps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mixing color ramps — mixColorRamps","text":"","code":"mixColorRamps(vars, ramps)  mixColor1Ramps(vars, ramps = colorRamp(c(\"blue\", \"black\", \"red\")))  mixColor2Ramps(   vars,   ramps = list(colorRamp(c(\"blue\", \"green\")), colorRamp(c(\"blue\", \"red\"))) )  mixColor3Ramps(   vars,   ramps = list(colorRamp(c(\"#001A00\", \"#00E600\")), colorRamp(c(\"#00001A\", \"#0000E6\")),     colorRamp(c(\"#1A0000\", \"#E60000\"))) )"},{"path":"/reference/mixColorRamps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mixing color ramps — mixColorRamps","text":"vars list variables ramps list color ramps, one variable.","code":""},{"path":"/reference/mixColorRamps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mixing color ramps — mixColorRamps","text":"automatically create colors represent varying number dimensions.","code":""},{"path":"/reference/mixColorRamps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mixing color ramps — mixColorRamps","text":"","code":"cols <- expand.grid(x = seq(0, 1, length.out = 10),                     y = seq(0, 1, length.out = 10),                     z = seq(0, 1, length.out = 10)) mixed <- mixColor3Ramps(cols)  if (FALSE) { if(requireNamespace(\"rgl\", quietly = TRUE)) { rgl::plot3d(cols$x, cols$y, cols$z, col = mixed, pch = 15) }  cols <- expand.grid(x = seq(0, 1, length.out = 10),                     y = seq(0, 1, length.out = 10)) mixed <- mixColor2Ramps(cols)  if(requireNamespace(\"graphics\", quietly = TRUE)) { plot(cols$x, cols$y, col = mixed, pch = 15) } }"},{"path":"/reference/nMDS-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Non-Metric Dimensional Scaling — nMDS-class","title":"Non-Metric Dimensional Scaling — nMDS-class","text":"S4 Class implementing Non-Metric Dimensional Scaling.","code":""},{"path":"/reference/nMDS-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Non-Metric Dimensional Scaling — nMDS-class","text":"non-linear extension MDS using monotonic regression","code":""},{"path":"/reference/nMDS-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Non-Metric Dimensional Scaling — nMDS-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/nMDS-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"Non-Metric Dimensional Scaling — nMDS-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/nMDS-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"Non-Metric Dimensional Scaling — nMDS-class","text":"nMDS can take following parameters: d distance function. ndim number embedding dimensions.","code":""},{"path":"/reference/nMDS-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"Non-Metric Dimensional Scaling — nMDS-class","text":"Wraps around monoMDS. parameters available , standard configuration used.","code":""},{"path":"/reference/nMDS-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Non-Metric Dimensional Scaling — nMDS-class","text":"Kruskal, J.B., 1964. Nonmetric multidimensional scaling: numerical method. Psychometrika 29, 115-129. https://doi.org/10.1007/BF02289694","code":""},{"path":[]},{"path":"/reference/nMDS-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Non-Metric Dimensional Scaling — nMDS-class","text":"","code":"if(requireNamespace(\"vegan\", quietly = TRUE)) {  dat <- loadDataSet(\"3D S Curve\", n = 300) emb <- embed(dat, \"nMDS\") plot(emb, type = \"2vars\")  }"},{"path":"/reference/ndims.html","id":null,"dir":"Reference","previous_headings":"","what":"Method ndims — ndims","title":"Method ndims — ndims","text":"Extract number dimensions.","code":""},{"path":"/reference/ndims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method ndims — ndims","text":"","code":"ndims(object, ...)"},{"path":"/reference/ndims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method ndims — ndims","text":"object extract number dimensions . ... Arguments methods","code":""},{"path":"/reference/plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting of dimRed* objects — plot","title":"Plotting of dimRed* objects — plot","text":"Plots object class dimRedResult dimRedData. documentation plotting function base see : plot.default.","code":""},{"path":"/reference/plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting of dimRed* objects — plot","text":"","code":"plot(x, y, ...)  # S4 method for dimRedData,ANY plot(   x,   type = \"pairs\",   vars = seq_len(ncol(x@data)),   col = seq_len(min(3, ncol(x@meta))),   ... )  # S4 method for dimRedResult,ANY plot(   x,   type = \"pairs\",   vars = seq_len(ncol(x@data@data)),   col = seq_len(min(3, ncol(x@data@meta))),   ... )"},{"path":"/reference/plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting of dimRed* objects — plot","text":"x dimRedResult/dimRedData class, e.g. output embedded/loadDataSet y Ignored ... handed underlying plotting function. type plot type, one c(\"pairs\", \"parpl\", \"2vars\", \"3vars\", \"3varsrgl\") vars axes embedding use plotting col columns meta slot use coloring, can referenced column names number x@data","code":""},{"path":"/reference/plot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plotting of dimRed* objects — plot","text":"Plotting functions classes usind dimRed. intended give quick overview results, somewhat inflexible, e.g. hard modify color scales plotting parameters. require control plotting, better convert object data.frame first use standard functions plotting.","code":""},{"path":"/reference/plot.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Plotting of dimRed* objects — plot","text":"plot(x = dimRedData, y = ): Ploting dimRedData objects plot(x = dimRedResult, y = ): Ploting dimRedResult objects.","code":""},{"path":"/reference/plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting of dimRed* objects — plot","text":"","code":"scurve = loadDataSet(\"3D S Curve\") if(requireNamespace(\"graphics\", quietly = TRUE))   plot(scurve, type = \"pairs\", main = \"pairs plot of S curve\")  if(requireNamespace(\"MASS\", quietly = TRUE))   plot(scurve, type = \"parpl\")  if(requireNamespace(\"graphics\", quietly = TRUE))   plot(scurve, type = \"2vars\", vars = c(\"y\", \"z\"))  if(requireNamespace(\"scatterplot3d\", quietly = TRUE))   plot(scurve, type = \"3vars\")  if(requireNamespace(\"rgl\", quietly = TRUE))   plot(scurve, type = \"3varsrgl\")  {\"x\":{\"material\":{\"color\":\"#000000\",\"alpha\":1,\"lit\":true,\"ambient\":\"#000000\",\"specular\":\"#FFFFFF\",\"emission\":\"#000000\",\"shininess\":50,\"smooth\":true,\"front\":\"filled\",\"back\":\"filled\",\"size\":3,\"lwd\":1,\"fog\":true,\"point_antialias\":false,\"line_antialias\":false,\"texture\":null,\"textype\":\"rgb\",\"texmipmap\":false,\"texminfilter\":\"linear\",\"texmagfilter\":\"linear\",\"texenvmap\":false,\"depth_mask\":true,\"depth_test\":\"less\",\"isTransparent\":false,\"polygon_offset\":[0,0],\"margin\":\"\",\"floating\":false,\"tag\":\"\",\"blend\":[\"src_alpha\",\"one_minus_src_alpha\"]},\"rootSubscene\":1,\"objects\":{\"7\":{\"id\":7,\"type\":\"points\",\"material\":{\"lit\":false},\"vertices\":\"0\",\"colors\":\"1\",\"centers\":\"2\",\"ignoreExtent\":false,\"flags\":34816},\"9\":{\"id\":9,\"type\":\"text\",\"material\":{\"lit\":false,\"margin\":0,\"floating\":true,\"edge\":[0,1,1]},\"vertices\":\"3\",\"colors\":\"4\",\"texts\":[[\"x\"]],\"cex\":[[1]],\"adj\":[[0.5,0.5,0.5]],\"centers\":\"5\",\"family\":[[\"sans\"]],\"font\":[[1]],\"ignoreExtent\":true,\"flags\":33808},\"10\":{\"id\":10,\"type\":\"text\",\"material\":{\"lit\":false,\"margin\":1,\"floating\":true,\"edge\":[1,1,1]},\"vertices\":\"6\",\"colors\":\"7\",\"texts\":[[\"y\"]],\"cex\":[[1]],\"adj\":[[0.5,0.5,0.5]],\"centers\":\"8\",\"family\":[[\"sans\"]],\"font\":[[1]],\"ignoreExtent\":true,\"flags\":33808},\"11\":{\"id\":11,\"type\":\"text\",\"material\":{\"lit\":false,\"margin\":2,\"floating\":true,\"edge\":[1,1,1]},\"vertices\":\"9\",\"colors\":\"10\",\"texts\":[[\"z\"]],\"cex\":[[1]],\"adj\":[[0.5,0.5,0.5]],\"centers\":\"11\",\"family\":[[\"sans\"]],\"font\":[[1]],\"ignoreExtent\":true,\"flags\":33808},\"5\":{\"id\":5,\"type\":\"light\",\"vertices\":[[0,0,1]],\"colors\":[[1,1,1,1],[1,1,1,1],[1,1,1,1]],\"viewpoint\":true,\"finite\":false},\"4\":{\"id\":4,\"type\":\"background\",\"material\":{},\"colors\":\"12\",\"centers\":\"13\",\"sphere\":false,\"fogtype\":\"none\",\"fogscale\":1,\"flags\":32768},\"6\":{\"id\":6,\"type\":\"background\",\"material\":{\"lit\":false,\"back\":\"lines\"},\"colors\":\"14\",\"centers\":\"15\",\"sphere\":false,\"fogtype\":\"none\",\"fogscale\":1,\"flags\":32768},\"8\":{\"id\":8,\"type\":\"bboxdeco\",\"material\":{\"front\":\"lines\",\"back\":\"lines\"},\"vertices\":\"16\",\"colors\":\"17\",\"axes\":{\"mode\":[\"pretty\",\"pretty\",\"pretty\"],\"step\":[0.5,0.5,1],\"nticks\":[5,5,5],\"marklen\":[15,15,15],\"expand\":[1.02999997138977,1.02999997138977,1.02999997138977]},\"draw_front\":true,\"flags\":32769},\"1\":{\"id\":1,\"type\":\"subscene\",\"par3d\":{\"antialias\":8,\"FOV\":30,\"ignoreExtent\":false,\"listeners\":1,\"mouseMode\":{\"none\":\"none\",\"left\":\"trackball\",\"right\":\"zoom\",\"middle\":\"fov\",\"wheel\":\"pull\"},\"observer\":[0,0,13.0738067626953],\"modelMatrix\":[[1.38485264778137,0,0,0.0124616976827383],[0,0.480923891067505,0.669026851654053,-0.47549644112587],[0,-1.32132744789124,0.243505880236626,-11.736837387085],[0,0,0,1]],\"projMatrix\":[[3.73205065727234,0,0,0],[0,3.73205065727234,0,0],[0,0,-3.86370301246643,-47.1295585632324],[0,0,-1,0]],\"skipRedraw\":false,\"userMatrix\":[[1,0,0,0],[0,0.342020143325668,0.939692620785909,0],[0,-0.939692620785909,0.342020143325668,0],[0,0,0,1]],\"userProjection\":[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],\"scale\":[1.38485264778137,1.40612733364105,0.711963534355164],\"viewport\":{\"x\":0,\"y\":0,\"width\":1,\"height\":1},\"zoom\":1,\"bbox\":[-1.12270760536194,1.10471045970917,-0.0877258479595184,2.10599136352539,-2.18097233772278,2.15161728858948],\"windowRect\":[0,0,256,256],\"family\":\"sans\",\"font\":1,\"cex\":1,\"useFreeType\":true,\"fontname\":\"NULL\",\"maxClipPlanes\":2147483647,\"glVersion\":\"NA\",\"activeSubscene\":0},\"embeddings\":{\"viewport\":\"replace\",\"projection\":\"replace\",\"model\":\"replace\",\"mouse\":\"replace\"},\"objects\":[6,8,7,9,10,11,5],\"subscenes\":[],\"flags\":36113}},\"crosstalk\":{\"key\":[],\"group\":[],\"id\":[],\"options\":[]},\"width\":700,\"height\":432.632880098888,\"buffer\":{\"accessors\":[{\"bufferView\":0,\"componentType\":5126,\"count\":2000,\"type\":\"VEC3\"},{\"bufferView\":1,\"componentType\":5121,\"count\":2000,\"type\":\"VEC4\",\"normalized\":true},{\"bufferView\":2,\"componentType\":5126,\"count\":2000,\"type\":\"VEC3\"},{\"bufferView\":3,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":4,\"componentType\":5121,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":5,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":6,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":7,\"componentType\":5121,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":8,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":9,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":10,\"componentType\":5121,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":11,\"componentType\":5126,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":12,\"componentType\":5126,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":13,\"componentType\":5121,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":14,\"componentType\":5121,\"count\":1,\"type\":\"VEC4\"},{\"bufferView\":15,\"componentType\":5121,\"count\":1,\"type\":\"VEC3\"},{\"bufferView\":16,\"componentType\":5126,\"count\":15,\"type\":\"VEC3\"},{\"bufferView\":17,\"componentType\":5121,\"count\":1,\"type\":\"VEC4\"}],\"bufferViews\":[{\"buffer\":0,\"byteLength\":24000,\"byteOffset\":0},{\"buffer\":0,\"byteLength\":8000,\"byteOffset\":24000},{\"buffer\":0,\"byteLength\":24000,\"byteOffset\":32000},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":56000},{\"buffer\":0,\"byteLength\":4,\"byteOffset\":56012},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":56016},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":56028},{\"buffer\":0,\"byteLength\":4,\"byteOffset\":56040},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":56044},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":56056},{\"buffer\":0,\"byteLength\":4,\"byteOffset\":56068},{\"buffer\":0,\"byteLength\":12,\"byteOffset\":56072},{\"buffer\":0,\"byteLength\":16,\"byteOffset\":56084},{\"buffer\":0,\"byteLength\":3,\"byteOffset\":56100},{\"buffer\":0,\"byteLength\":4,\"byteOffset\":56103},{\"buffer\":0,\"byteLength\":3,\"byteOffset\":56107},{\"buffer\":0,\"byteLength\":180,\"byteOffset\":56112},{\"buffer\":0,\"byteLength\":4,\"byteOffset\":56292}],\"buffers\":[{\"byteLength\":56296,\"bytes\":\"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\\nuD+K2kQ/GBkHPulV0T+eARq8UTB9P6p40D9T9KQ/dhEtP5DpKD4mLNC/D/wAvy/KFj+tqvu/\\nEVTBPv7mwD9Vt++/Rcl3v7LfOz1/f4S/m1UVv+eBOD/BZuA/0Ax4v7n08z8y8WU/RZ9FP2TR\\nlD/7hdC/OjM5PmaEWT+p3gBArZGAP84kuD8DSpC/ZkF0v7uDyD/MLss+v+NiP+MyoD5X38I/\\nkTYQvlnaYT/5YfG/SK0EPlOZ7j9NfPo/6tE9vh726T+0dP6/q6sKP5NSGj2G4fM/EOtBPSKu\\n0z+w/rW87eN7vn6GNz9cx1M8m6GHv/W6qT9VuqG/RFYlP0Ar0j/uZ+I/XmqAvzvKdD84zYI/\\nxmtrv43FjD/XYCY/Y794PwltkD9YAkm/Ml+5vZoo7T/JSAHAVQs3v+3dQj9K4ta/+Q8cvqeB\\n4D9XmmA8r/90v9bfiz/TA0A/ck7xPQ+TUj+rCHY9Lv8KPSB3nz84Ifa//8mHPx4mLD8YAkC/\\nnpIWPyCwDj6lDvK/FskNv4irmj7ZKOG/0oqFP4SaxT5vp0i/Ps1Sv0vH3D9oasS/JZ4vPlb9\\n5z8n5Mo8sfWGPybKIT8/4qM/Bb+PPjZLzT+VqPm/FqF8vwUDIj/oIpO/SZfjPJTn3T+fGwTA\\nbfEMvy7HqD4WDa09vxxHP0nWtz9KaLG+hVaGP+Zcwj8nwki/MRaCP+P/xj/WDZW/ZBPiPqFH\\n5z9fkPC/nmJJvxqbaT9pyti/o2fNvkDi8j/38vc/7jVzP53LxT+Olb+/sia9PgEVNT/lAe8/\\nRsZsvx3oAT++mLQ/9XSoPXiQqT73NP+/f/pQv1Os0z9Iusg/UIYCv/Ay1j/FlC8+8YZgv1du\\n2D98qZM/zP4NPkWV9T4K6AJAsEgQP35Byj5cpUW+JrWBv7Iw4T+KEZi/982aPhVl2D9AHPs/\\njdDVPvr97T/Ri+s/fWlAv9ajLT77T98/UK1nv9lZLT9NQbG/AdF+P+e6cz9E548//c7yvvku\\nIz/FLua/cedHPzOdoj883NU/oLX/Po639z8Gz+K/n4tsv2oy7j4n7wU/YHlmvwhv3D/qZKs/\\noe1KvwuFiD8wwO8+nIUqvZAdnj8czv2/swEIvxt7mj/IMu2/9gmHPxtu1T7ZQka/lPx7v3fd\\nDj88pp+/eIN3v5pp8D7QVXi/fQ9zP9rJ9T9Onte+MaASv6pr8z4zu+q/AfooPl8hVD/aaPw/\\n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\\n5T/CZn8/M/TlP6ghhD+fUz6+eczpP90l/z+CJ8A+LiLnP2rk7j90ins/YzOOP3OxcL+EN8u+\\nM3nDO0W6+D+Zz7K+kDWPPzOQBkDpTl2/lg24PzMouj9XxD2/BlrjP+GguD5irRC+cXdEP53D\\n/T8pOm4/KyqcPQvbJL/bCM2+6EsMPi3gvDzCDW2/mcx1P9uJKz9iLlc/fFUqP4Oys783bGM/\\nQp5KPw90mz9KDtc+JZPWP9hR7r+aDgA/vt7YP1JIWb6qYK8+PM2cPfFNFb4sKlG/8D3qPkqw\\nrr87t7i+Z9efP//+RT0K5Fo/i9ytPjJFFL8Q4FA/u9quP25zE7+4Maq9j5dAP4kFZL20mWU/\\n64XvP3c9wz/ZCTo/nt3ZP4+T1L+Z4VA//R3PP5LJzj+aQlw+gtEvP+srBcB/CW4/ENrCP7Kz\\nvT95V14/AsujP7gwuD+DpXc+UbymP1z9AUD00mK/hirWPzeTtb/gR929ZTXOPpmHBECon/e+\\nWgqoPzF/+T+jPpm+5zO3P+d5AkD+/YK/3Ue4P1nWhD8920+/Na4oPy6srT+eFya/fnfAPpzN\\n8b8VKlS+nsiaP3QdhL1+eSI/yOPmP9Sr7D84VD2/yq+PP0x73r9mwFQ/HoebPgtk475IYHu/\\ndHnUPiqAPD8s4Ha/NIioP+HSjj+muhw+GsrWP60T+7+dnSu/dB7iPnrg3D9GRYI/N8TxP2W2\\njr/itI+/dMlXPz3oYT+38F2+Wd/CPy73A8AyUR6/LpaBPx/GOD6yd3E/+jwaP7Dz+L6jywc/\\nwtetPzLnH77VHCu/iR6bP1Xbjj4LahA/lsuWPzEKbb59fRK/Ia9WP2p16T8Acj8+SennP3hc\\nAUDgqkA/LueHP4Y7wD+O+YS/gaZ4Pt1lVj9E8XU/ZwcpP5lngT87Kaw+4UBPP4h1+T+6hSC/\\nJg7xPig11j9v/GQ/r0j+P0FCJ78FdRi/BSsQP8Te6b81wkS/eeBfP5vFzz+WfNO+g7iUPoim\\n/j+mSms/6ZXmPzFCs79MJXw/tdctP3tfcr9cCLu9PfpMP5ja+b+qczY/XjN8P1QR2j8rS08/\\nODvWP7l/A7+/eWS/W4KGP9ca3z6FkoI/PAj5PWxfcL8SjvK+gxxGP7W64j0BYoC/ERrcP7Aa\\ngT9syoI/NvyvP1j6oj/bd9m+RopuP15V7T+YZ28/IkBJP7fdsj+NZGi/SnjtPv3QvT/q9yk/\\n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\\nzvLnP7jn5T//c30/Qzr7P9jaL7+V268+i2mCPuOqrL0+Djy/2PdZP3eRzr+kw0s/VwXKPyOB\\nu793X2o/ScAKP0X6d79OSwS/glbDP8QgMj6lXWs/Gu8ZPym+tr8nxbk+pnSZPxI/9j8Iswi/\\ncYtGP892QT4mToA+sJmKP2Mv9b2M0BC/t93lPx0r8D+9KHQ/YXa8P7kTM7/WO12//9pJP9qO\\npr/flH2+bWqlP/ZcAT5lv2g+e6K5P1S6AsD1+se+9yr2PSwD8T+efEi//xV4P95tvb8hRme/\\nLe10P9dg5z4hzCS/e9AUP2b55b8inzQ/MfuSPy4U7z996bk+iCWgP8w99D+Kb3O/The5P9Ei\\np79Zhqw+kZY5P7B69T+O2Aw/OxuhP79y5b/gGTw/eIQaP79/yz8R6nu+ISBwP6uF/T8RKjS+\\n2OZ3Px6DAMDHrca9WlTkP1wN9z9PKDy/WtA+P+BS2j9xV3e+rqT/PuTnYTxzokA/CFptP/tG\\nyz9o9dQ+X9a0P1vk7j81W2e/X/W6P3/b2z4W97a+r6hmPvJU+b+jZza/agWuPW1uyT9sxz8/\\ncLjBP6ApyD+a7G2+8cuwPkzv+78YV7M9w9BvP5ISBsC7+ms/Mq6OPw8oPr8oZXm/35JmPzKk\\nhz98T7m+jsKYP3SE+L8lwXy+a6oVPabx/z9t7j8/iPtjPvXr2D/QLie/9IB3P3vLpj71NiE/\\n+a6pP4olkr77kMq9Tbe7P5+x+b8HwY2+tsiVP3b+/D8KpLi+k26CP45R/T9JKUQ/eG+HP4TF\\nzr5Ka1M/SkFsP/gfrb91N+Y+K3PlP/L67L8ccB6/5Is+Px/267+pOAS+TDOePyaDAEA2+c0+\\nT7VCPnd/+j/KNHG/nq6iPe9ATj+aeJc+AQiQP7ZX9z97O+w+pcUwP+0wfr0J+DA/L/zLP1fV\\nh75NghI/yd3HP2ll5D90Hns/CTxLPrNmtL8KDr4+8s45PgqL8T+xTMc8HAYKPyEtAECH+RW/\\n+5l3P+X3978Q4GQ/kx1DPhrH+r43+bI9JZevP4FrA8A5X6u+xSiGPu93AMBrVzg/GwzfP/Hb\\n1r/rsZO9OnXePwJOAkBm/3U/JWvfP+/MoD8Z1O89FzuHPnPXWb18xXs//uyUP+QOUr/xeiY/\\nGrb4PwDv578fIoi/pVYdPvo4Rj9r7IK/hFWgP6/JeD9SPk0/dU63PM4Mw7+RiOe+BFOuP5KD\\n+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\\nAADAfwAAwH8AAIA/AADAfwAAwH8AAABAAAAAAQ==\"}]},\"context\":{\"shiny\":false,\"rmarkdown\":null},\"vertexShader\":\"#line 2 1\\n// File 1 is the vertex shader\\n#ifdef GL_ES\\n#ifdef GL_FRAGMENT_PRECISION_HIGH\\nprecision highp float;\\n#else\\nprecision mediump float;\\n#endif\\n#endif\\n\\nattribute vec3 aPos;\\nattribute vec4 aCol;\\nuniform mat4 mvMatrix;\\nuniform mat4 prMatrix;\\nvarying vec4 vCol;\\nvarying vec4 vPosition;\\n\\n#ifdef NEEDS_VNORMAL\\nattribute vec3 aNorm;\\nuniform mat4 normMatrix;\\nvarying vec4 vNormal;\\n#endif\\n\\n#if defined(HAS_TEXTURE) || defined (IS_TEXT)\\nattribute vec2 aTexcoord;\\nvarying vec2 vTexcoord;\\n#endif\\n\\n#ifdef FIXED_SIZE\\nuniform vec3 textScale;\\n#endif\\n\\n#ifdef FIXED_QUADS\\nattribute vec3 aOfs;\\n#endif\\n\\n#ifdef IS_TWOSIDED\\n#ifdef HAS_NORMALS\\nvarying float normz;\\nuniform mat4 invPrMatrix;\\n#else\\nattribute vec3 aPos1;\\nattribute vec3 aPos2;\\nvarying float normz;\\n#endif\\n#endif // IS_TWOSIDED\\n\\n#ifdef FAT_LINES\\nattribute vec3 aNext;\\nattribute vec2 aPoint;\\nvarying vec2 vPoint;\\nvarying float vLength;\\nuniform float uAspect;\\nuniform float uLwd;\\n#endif\\n\\n\\nvoid main(void) {\\n  \\n#ifndef IS_BRUSH\\n#if defined(NCLIPPLANES) || !defined(FIXED_QUADS) || defined(HAS_FOG)\\n  vPosition = mvMatrix * vec4(aPos, 1.);\\n#endif\\n  \\n#ifndef FIXED_QUADS\\n  gl_Position = prMatrix * vPosition;\\n#endif\\n#endif // !IS_BRUSH\\n  \\n#ifdef IS_POINTS\\n  gl_PointSize = POINTSIZE;\\n#endif\\n  \\n  vCol = aCol;\\n  \\n#ifdef NEEDS_VNORMAL\\n  vNormal = normMatrix * vec4(-aNorm, dot(aNorm, aPos));\\n#endif\\n  \\n#ifdef IS_TWOSIDED\\n#ifdef HAS_NORMALS\\n  /* normz should be calculated *after* projection */\\n  normz = (invPrMatrix*vNormal).z;\\n#else\\n  vec4 pos1 = prMatrix*(mvMatrix*vec4(aPos1, 1.));\\n  pos1 = pos1/pos1.w - gl_Position/gl_Position.w;\\n  vec4 pos2 = prMatrix*(mvMatrix*vec4(aPos2, 1.));\\n  pos2 = pos2/pos2.w - gl_Position/gl_Position.w;\\n  normz = pos1.x*pos2.y - pos1.y*pos2.x;\\n#endif\\n#endif // IS_TWOSIDED\\n  \\n#ifdef NEEDS_VNORMAL\\n  vNormal = vec4(normalize(vNormal.xyz/vNormal.w), 1);\\n#endif\\n  \\n#if defined(HAS_TEXTURE) || defined(IS_TEXT)\\n  vTexcoord = aTexcoord;\\n#endif\\n  \\n#if defined(FIXED_SIZE) && !defined(ROTATING)\\n  vec4 pos = prMatrix * mvMatrix * vec4(aPos, 1.);\\n  pos = pos/pos.w;\\n  gl_Position = pos + vec4(aOfs*textScale, 0.);\\n#endif\\n  \\n#if defined(IS_SPRITES) && !defined(FIXED_SIZE)\\n  vec4 pos = mvMatrix * vec4(aPos, 1.);\\n  pos = pos/pos.w + vec4(aOfs,  0.);\\n  gl_Position = prMatrix*pos;\\n#endif\\n  \\n#ifdef FAT_LINES\\n  /* This code was inspired by Matt Deslauriers' code in \\n   https://mattdesl.svbtle.com/drawing-lines-is-hard */\\n  vec2 aspectVec = vec2(uAspect, 1.0);\\n  mat4 projViewModel = prMatrix * mvMatrix;\\n  vec4 currentProjected = projViewModel * vec4(aPos, 1.0);\\n  currentProjected = currentProjected/currentProjected.w;\\n  vec4 nextProjected = projViewModel * vec4(aNext, 1.0);\\n  vec2 currentScreen = currentProjected.xy * aspectVec;\\n  vec2 nextScreen = (nextProjected.xy / nextProjected.w) * aspectVec;\\n  float len = uLwd;\\n  vec2 dir = vec2(1.0, 0.0);\\n  vPoint = aPoint;\\n  vLength = length(nextScreen - currentScreen)/2.0;\\n  vLength = vLength/(vLength + len);\\n  if (vLength > 0.0) {\\n    dir = normalize(nextScreen - currentScreen);\\n  }\\n  vec2 normal = vec2(-dir.y, dir.x);\\n  dir.x /= uAspect;\\n  normal.x /= uAspect;\\n  vec4 offset = vec4(len*(normal*aPoint.x*aPoint.y - dir), 0.0, 0.0);\\n  gl_Position = currentProjected + offset;\\n#endif\\n  \\n#ifdef IS_BRUSH\\n  gl_Position = vec4(aPos, 1.);\\n#endif\\n}\",\"fragmentShader\":\"#line 2 2\\n// File 2 is the fragment shader\\n#ifdef GL_ES\\n#ifdef GL_FRAGMENT_PRECISION_HIGH\\nprecision highp float;\\n#else\\nprecision mediump float;\\n#endif\\n#endif\\nvarying vec4 vCol; // carries alpha\\nvarying vec4 vPosition;\\n#if defined(HAS_TEXTURE) || defined (IS_TEXT)\\nvarying vec2 vTexcoord;\\nuniform sampler2D uSampler;\\n#endif\\n\\n#ifdef HAS_FOG\\nuniform int uFogMode;\\nuniform vec3 uFogColor;\\nuniform vec4 uFogParms;\\n#endif\\n\\n#if defined(IS_LIT) && !defined(FIXED_QUADS)\\nvarying vec4 vNormal;\\n#endif\\n\\n#if NCLIPPLANES > 0\\nuniform vec4 vClipplane[NCLIPPLANES];\\n#endif\\n\\n#if NLIGHTS > 0\\nuniform mat4 mvMatrix;\\n#endif\\n\\n#ifdef IS_LIT\\nuniform vec3 emission;\\nuniform float shininess;\\n#if NLIGHTS > 0\\nuniform vec3 ambient[NLIGHTS];\\nuniform vec3 specular[NLIGHTS]; // light*material\\nuniform vec3 diffuse[NLIGHTS];\\nuniform vec3 lightDir[NLIGHTS];\\nuniform bool viewpoint[NLIGHTS];\\nuniform bool finite[NLIGHTS];\\n#endif\\n#endif // IS_LIT\\n\\n#ifdef IS_TWOSIDED\\nuniform bool front;\\nvarying float normz;\\n#endif\\n\\n#ifdef FAT_LINES\\nvarying vec2 vPoint;\\nvarying float vLength;\\n#endif\\n\\nvoid main(void) {\\n  vec4 fragColor;\\n#ifdef FAT_LINES\\n  vec2 point = vPoint;\\n  bool neg = point.y < 0.0;\\n  point.y = neg ? (point.y + vLength)/(1.0 - vLength) :\\n                 -(point.y - vLength)/(1.0 - vLength);\\n#if defined(IS_TRANSPARENT) && defined(IS_LINESTRIP)\\n  if (neg && length(point) <= 1.0) discard;\\n#endif\\n  point.y = min(point.y, 0.0);\\n  if (length(point) > 1.0) discard;\\n#endif // FAT_LINES\\n  \\n#ifdef ROUND_POINTS\\n  vec2 coord = gl_PointCoord - vec2(0.5);\\n  if (length(coord) > 0.5) discard;\\n#endif\\n  \\n#if NCLIPPLANES > 0\\n  for (int i = 0; i < NCLIPPLANES; i++)\\n    if (dot(vPosition, vClipplane[i]) < 0.0) discard;\\n#endif\\n    \\n#ifdef FIXED_QUADS\\n    vec3 n = vec3(0., 0., 1.);\\n#elif defined(IS_LIT)\\n    vec3 n = normalize(vNormal.xyz);\\n#endif\\n    \\n#ifdef IS_TWOSIDED\\n    if ((normz <= 0.) != front) discard;\\n#endif\\n    \\n#ifdef IS_LIT\\n    vec3 eye = normalize(-vPosition.xyz/vPosition.w);\\n    vec3 lightdir;\\n    vec4 colDiff;\\n    vec3 halfVec;\\n    vec4 lighteffect = vec4(emission, 0.);\\n    vec3 col;\\n    float nDotL;\\n#ifdef FIXED_QUADS\\n    n = -faceforward(n, n, eye);\\n#endif\\n    \\n#if NLIGHTS > 0\\n    for (int i=0;i<NLIGHTS;i++) {\\n      colDiff = vec4(vCol.rgb * diffuse[i], vCol.a);\\n      lightdir = lightDir[i];\\n      if (!viewpoint[i])\\n        lightdir = (mvMatrix * vec4(lightdir, 1.)).xyz;\\n      if (!finite[i]) {\\n        halfVec = normalize(lightdir + eye);\\n      } else {\\n        lightdir = normalize(lightdir - vPosition.xyz/vPosition.w);\\n        halfVec = normalize(lightdir + eye);\\n      }\\n      col = ambient[i];\\n      nDotL = dot(n, lightdir);\\n      col = col + max(nDotL, 0.) * colDiff.rgb;\\n      col = col + pow(max(dot(halfVec, n), 0.), shininess) * specular[i];\\n      lighteffect = lighteffect + vec4(col, colDiff.a);\\n    }\\n#endif\\n    \\n#else // not IS_LIT\\n    vec4 colDiff = vCol;\\n    vec4 lighteffect = colDiff;\\n#endif\\n    \\n#ifdef IS_TEXT\\n    vec4 textureColor = lighteffect*texture2D(uSampler, vTexcoord);\\n#endif\\n    \\n#ifdef HAS_TEXTURE\\n#ifdef TEXTURE_rgb\\n    vec4 textureColor = lighteffect*vec4(texture2D(uSampler, vTexcoord).rgb, 1.);\\n#endif\\n    \\n#ifdef TEXTURE_rgba\\n    vec4 textureColor = lighteffect*texture2D(uSampler, vTexcoord);\\n#endif\\n    \\n#ifdef TEXTURE_alpha\\n    vec4 textureColor = texture2D(uSampler, vTexcoord);\\n    float luminance = dot(vec3(1.,1.,1.), textureColor.rgb)/3.;\\n    textureColor =  vec4(lighteffect.rgb, lighteffect.a*luminance);\\n#endif\\n    \\n#ifdef TEXTURE_luminance\\n    vec4 textureColor = vec4(lighteffect.rgb*dot(texture2D(uSampler, vTexcoord).rgb, vec3(1.,1.,1.))/3., lighteffect.a);\\n#endif\\n    \\n#ifdef TEXTURE_luminance_alpha\\n    vec4 textureColor = texture2D(uSampler, vTexcoord);\\n    float luminance = dot(vec3(1.,1.,1.),textureColor.rgb)/3.;\\n    textureColor = vec4(lighteffect.rgb*luminance, lighteffect.a*textureColor.a);\\n#endif\\n    \\n    fragColor = textureColor;\\n\\n#elif defined(IS_TEXT)\\n    if (textureColor.a < 0.1)\\n      discard;\\n    else\\n      fragColor = textureColor;\\n#else\\n    fragColor = lighteffect;\\n#endif // HAS_TEXTURE\\n    \\n#ifdef HAS_FOG\\n    // uFogParms elements: x = near, y = far, z = fogscale, w = (1-sin(FOV/2))/(1+sin(FOV/2))\\n    // In Exp and Exp2: use density = density/far\\n    // fogF will be the proportion of fog\\n    // Initialize it to the linear value\\n    float fogF;\\n    if (uFogMode > 0) {\\n      fogF = (uFogParms.y - vPosition.z/vPosition.w)/(uFogParms.y - uFogParms.x);\\n      if (uFogMode > 1)\\n        fogF = mix(uFogParms.w, 1.0, fogF);\\n      fogF = fogF*uFogParms.z;\\n      if (uFogMode == 2)\\n        fogF = 1.0 - exp(-fogF);\\n      // Docs are wrong: use (density*c)^2, not density*c^2\\n      // https://gitlab.freedesktop.org/mesa/mesa/-/blob/master/src/mesa/swrast/s_fog.c#L58\\n      else if (uFogMode == 3)\\n        fogF = 1.0 - exp(-fogF*fogF);\\n      fogF = clamp(fogF, 0.0, 1.0);\\n      gl_FragColor = vec4(mix(fragColor.rgb, uFogColor, fogF), fragColor.a);\\n    } else gl_FragColor = fragColor;\\n#else\\n    gl_FragColor = fragColor;\\n#endif // HAS_FOG\\n    \\n}\",\"players\":[],\"webGLoptions\":{\"preserveDrawingBuffer\":true}},\"evals\":[],\"jsHooks\":[]}"},{"path":"/reference/plot_R_NX.html","id":null,"dir":"Reference","previous_headings":"","what":"plot_R_NX — plot_R_NX","title":"plot_R_NX — plot_R_NX","text":"Plot R_NX curve different embeddings. Takes list dimRedResult objects input. Also Area curve values computed weighted K (see AUC_lnK_R_NX details) appear legend.","code":""},{"path":"/reference/plot_R_NX.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plot_R_NX — plot_R_NX","text":"","code":"plot_R_NX(x, ndim = NA, weight = \"inv\")"},{"path":"/reference/plot_R_NX.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plot_R_NX — plot_R_NX","text":"x list dimRedResult objects. names list appear legend AUC_lnK value. ndim number dimensions, NA original number embedding dimensions used, can vector giving embedding dimensionality single list element x. weight weight function used K calculating AUC, one c(\"inv\", \"log\", \"log10\")","code":""},{"path":"/reference/plot_R_NX.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"plot_R_NX — plot_R_NX","text":"ggplot object, design can changed appending  theme(...)","code":""},{"path":[]},{"path":"/reference/plot_R_NX.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"plot_R_NX — plot_R_NX","text":"","code":"if(requireNamespace(c(\"RSpectra\", \"igraph\", \"RANN\", \"ggplot\", \"tidyr\", \"scales\"), quietly = TRUE)) { ## define which methods to apply embed_methods <- c(\"Isomap\", \"PCA\") ## load test data set data_set <- loadDataSet(\"3D S Curve\", n = 200) ## apply dimensionality reduction data_emb <- lapply(embed_methods, function(x) embed(data_set, x)) names(data_emb) <- embed_methods ## plot the R_NX curves: plot_R_NX(data_emb) +     ggplot2::theme(legend.title = ggplot2::element_blank(),                    legend.position = c(0.5, 0.1),                    legend.justification = c(0.5, 0.1)) } #> 2023-03-21 13:05:38: Isomap START #> 2023-03-21 13:05:38: constructing knn graph #> 2023-03-21 13:05:38: calculating geodesic distances #> 2023-03-21 13:05:38: Classical Scaling #> Warning: `gather_()` was deprecated in tidyr 1.2.0. #> ℹ Please use `gather()` instead. #> ℹ The deprecated feature was likely used in the dimRed package. #>   Please report the issue at <https://github.com/gdkrmr/dimRed/issues>."},{"path":"/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Method print — print","title":"Method print — print","text":"Imports print method package namespace.","code":""},{"path":"/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method print — print","text":"","code":"print(x, ...)"},{"path":"/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method print — print","text":"x object printed. ... arguments printing.","code":""},{"path":"/reference/quality.html","id":null,"dir":"Reference","previous_headings":"","what":"Quality Criteria for dimensionality reduction. — quality,dimRedResult-method","title":"Quality Criteria for dimensionality reduction. — quality,dimRedResult-method","text":"collection functions compute quality measures dimRedResult objects.","code":""},{"path":"/reference/quality.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quality Criteria for dimensionality reduction. — quality,dimRedResult-method","text":"","code":"# S4 method for dimRedResult quality(.data, .method = dimRedQualityList(), .mute = character(0), ...)  dimRedQualityList(filter = FALSE)"},{"path":"/reference/quality.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quality Criteria for dimensionality reduction. — quality,dimRedResult-method","text":".data object class dimRedResult .method character vector naming one methods .mute output embedding method muted. ... pameters, internally passed list quality method pars = list(...) filter filter methods installed packages","code":""},{"path":"/reference/quality.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quality Criteria for dimensionality reduction. — quality,dimRedResult-method","text":"number","code":""},{"path":"/reference/quality.html","id":"methods-by-class-","dir":"Reference","previous_headings":"","what":"Methods (by class)","title":"Quality Criteria for dimensionality reduction. — quality,dimRedResult-method","text":"quality(dimRedResult): Calculate quality index dimRedResult object.","code":""},{"path":"/reference/quality.html","id":"implemented-methods","dir":"Reference","previous_headings":"","what":"Implemented methods","title":"Quality Criteria for dimensionality reduction. — quality,dimRedResult-method","text":"Method must one \"Q_local\", \"Q_global\", \"mean_R_NX\", \"total_correlation\", \"cophenetic_correlation\", \"distance_correlation\", \"reconstruction_rmse\"","code":""},{"path":"/reference/quality.html","id":"rank-based-criteria","dir":"Reference","previous_headings":"","what":"Rank based criteria","title":"Quality Criteria for dimensionality reduction. — quality,dimRedResult-method","text":"Q_local, Q_global, mean_R_NX quality criteria based Co-ranking matrix.  Q_local Q_global determine local/global quality embedding, mean_R_NX determines quality overall embedding. parameter free return single number. object must include original data.  number returns range [0, 1], higher values mean better local/global embedding.","code":""},{"path":"/reference/quality.html","id":"correlation-based-criteria","dir":"Reference","previous_headings":"","what":"Correlation based criteria","title":"Quality Criteria for dimensionality reduction. — quality,dimRedResult-method","text":"total_correlation calculates sum mean squared correlations original axes axes reduced dimensions, methods care correlations axes, option rotate data reduced space maximize criterium. number may greater one dimensions summed . cophenetic_correlation calculate correlation lower triangles distance matrices, correlation distance methods may specified. result range [-1, 1]. distance_correlation measures independes samples calculating correlation distances. details see dcor.","code":""},{"path":"/reference/quality.html","id":"reconstruction-error","dir":"Reference","previous_headings":"","what":"Reconstruction error","title":"Quality Criteria for dimensionality reduction. — quality,dimRedResult-method","text":"reconstruction_rmse calculates root mean squared error reconstrucion. object requires inverse function.","code":""},{"path":"/reference/quality.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Quality Criteria for dimensionality reduction. — quality,dimRedResult-method","text":"Lueks, W., Mokbel, B., Biehl, M., Hammer, B., 2011.     Evaluate Dimensionality Reduction? - Improving     Co-ranking Matrix. arXiv:1110.3917 [cs]. Szekely, G.J., Rizzo, M.L., Bakirov, N.K., 2007. Measuring     testing dependence correlation distances. Ann. Statist. 35,     2769-2794. doi:10.1214/009053607000000505 Lee, J.., Peluffo-Ordonez, D.H., Verleysen, M., 2015. Multi-scale     similarities stochastic neighbour embedding: Reducing     dimensionality preserving local global     structure. Neurocomputing, 169,     246-261. doi:10.1016/j.neucom.2014.12.095","code":""},{"path":[]},{"path":"/reference/quality.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Quality Criteria for dimensionality reduction. — quality,dimRedResult-method","text":"Guido Kraemer","code":""},{"path":"/reference/quality.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quality Criteria for dimensionality reduction. — quality,dimRedResult-method","text":"","code":"if (FALSE) { embed_methods <- dimRedMethodList() quality_methods <- dimRedQualityList() scurve <- loadDataSet(\"Iris\")  quality_results <- matrix(NA, length(embed_methods), length(quality_methods),                               dimnames = list(embed_methods, quality_methods)) embedded_data <- list()  for (e in embed_methods) {   message(\"embedding: \", e)   embedded_data[[e]] <- embed(scurve, e, .mute = c(\"message\", \"output\"))   for (q in quality_methods) {     message(\"  quality: \", q)     quality_results[e, q] <- tryCatch(       quality(embedded_data[[e]], q),       error = function (e) NA     )   } }  print(quality_results) }"},{"path":"/reference/reconstruction_error-dimRedResult-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method reconstruction_error — reconstruction_error,dimRedResult-method","title":"Method reconstruction_error — reconstruction_error,dimRedResult-method","text":"Calculate error using first n dimensions embedded data. error_fun can either one c(\"rmse\", \"mae\") calculate root mean square error mean absolute error respectively, function takes equally sized vectors input returns single number output.","code":""},{"path":"/reference/reconstruction_error-dimRedResult-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method reconstruction_error — reconstruction_error,dimRedResult-method","text":"","code":"# S4 method for dimRedResult reconstruction_error(object, n = seq_len(ndims(object)), error_fun = \"rmse\")"},{"path":"/reference/reconstruction_error-dimRedResult-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method reconstruction_error — reconstruction_error,dimRedResult-method","text":"object class dimRedResult n positive integer vector integers <= ndims(object) error_fun function string indicating error function, indication function must take matrices size return scalar.","code":""},{"path":"/reference/reconstruction_error-dimRedResult-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Method reconstruction_error — reconstruction_error,dimRedResult-method","text":"vector number length n ","code":""},{"path":[]},{"path":"/reference/reconstruction_error-dimRedResult-method.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Method reconstruction_error — reconstruction_error,dimRedResult-method","text":"Guido Kraemer","code":""},{"path":"/reference/reconstruction_error-dimRedResult-method.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Method reconstruction_error — reconstruction_error,dimRedResult-method","text":"","code":"if (FALSE) { ir <- loadDataSet(\"Iris\") ir.drr <- embed(ir, \"DRR\", ndim = ndims(ir)) ir.pca <- embed(ir, \"PCA\", ndim = ndims(ir))  rmse <- data.frame(   rmse_drr = reconstruction_error(ir.drr),   rmse_pca = reconstruction_error(ir.pca) )  matplot(rmse, type = \"l\") plot(ir) plot(ir.drr) plot(ir.pca) }"},{"path":"/reference/reconstruction_rmse-dimRedResult-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method reconstruction_rmse — reconstruction_rmse,dimRedResult-method","title":"Method reconstruction_rmse — reconstruction_rmse,dimRedResult-method","text":"Calculate reconstruction root mean squared error dimensionality reduction, method must inverse mapping.","code":""},{"path":"/reference/reconstruction_rmse-dimRedResult-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method reconstruction_rmse — reconstruction_rmse,dimRedResult-method","text":"","code":"# S4 method for dimRedResult reconstruction_rmse(object)"},{"path":"/reference/reconstruction_rmse-dimRedResult-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method reconstruction_rmse — reconstruction_rmse,dimRedResult-method","text":"object class dimRedResult","code":""},{"path":[]},{"path":"/reference/tSNE-class.html","id":null,"dir":"Reference","previous_headings":"","what":"t-Distributed Stochastic Neighborhood Embedding — tSNE-class","title":"t-Distributed Stochastic Neighborhood Embedding — tSNE-class","text":"S4 Class t-SNE.","code":""},{"path":"/reference/tSNE-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"t-Distributed Stochastic Neighborhood Embedding — tSNE-class","text":"t-SNE method uses Kullback-Leibler divergence distance matrices high low-dimensional space embed data. method well suited visualize complex structures low dimensions.","code":""},{"path":"/reference/tSNE-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"t-Distributed Stochastic Neighborhood Embedding — tSNE-class","text":"fun function embedding returns dimRedResult object. stdpars standard parameters function.","code":""},{"path":"/reference/tSNE-class.html","id":"general-usage","dir":"Reference","previous_headings":"","what":"General usage","title":"t-Distributed Stochastic Neighborhood Embedding — tSNE-class","text":"Dimensionality reduction methods S4 Classes either used directly, case initialized full list parameters handed @fun() slot, method name passed embed function parameters can given ..., case missing parameters replaced ones @stdpars.","code":""},{"path":"/reference/tSNE-class.html","id":"parameters","dir":"Reference","previous_headings":"","what":"Parameters","title":"t-Distributed Stochastic Neighborhood Embedding — tSNE-class","text":"t-SNE can take following parameters: d distance function, defaults euclidean distances perplexity perplexity parameter, roughly equivalent neighborhood size. theta Approximation nearest neighbour search, large values inaccurate. ndim number embedding dimensions.","code":""},{"path":"/reference/tSNE-class.html","id":"implementation","dir":"Reference","previous_headings":"","what":"Implementation","title":"t-Distributed Stochastic Neighborhood Embedding — tSNE-class","text":"Wraps around Rtsne, well documented. Setting theta = 0 normal t-SNE, larger values theta < 1 use Barnes-Hut algorithm scales much nicer data size. Larger values perplexity take larger neighborhoods account.","code":""},{"path":"/reference/tSNE-class.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"t-Distributed Stochastic Neighborhood Embedding — tSNE-class","text":"Maaten, L. van der, 2014. Accelerating t-SNE using Tree-Based Algorithms. Journal Machine Learning Research 15, 3221-3245. van der Maaten, L., Hinton, G., 2008. Visualizing Data using t-SNE. J. Mach. Learn. Res. 9, 2579-2605.","code":""},{"path":[]},{"path":"/reference/tSNE-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"t-Distributed Stochastic Neighborhood Embedding — tSNE-class","text":"","code":"if (FALSE) { dat <- loadDataSet(\"3D S Curve\", n = 300) emb <- embed(dat, \"tSNE\", perplexity = 80) plot(emb, type = \"2vars\") }"},{"path":"/reference/total_correlation-dimRedResult-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Method total_correlation — total_correlation,dimRedResult-method","title":"Method total_correlation — total_correlation,dimRedResult-method","text":"Calculate total correlation variables axes assess quality dimensionality reduction.","code":""},{"path":"/reference/total_correlation-dimRedResult-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Method total_correlation — total_correlation,dimRedResult-method","text":"","code":"# S4 method for dimRedResult total_correlation(   object,   naxes = ndims(object),   cor_method = \"pearson\",   is.rotated = FALSE )"},{"path":"/reference/total_correlation-dimRedResult-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Method total_correlation — total_correlation,dimRedResult-method","text":"object class dimRedResult naxes number axes use optimization. cor_method correlation method use. .rotated FALSE object rotated.","code":""},{"path":[]},{"path":"/news/index.html","id":"dimred-021-and-022","dir":"Changelog","previous_headings":"","what":"dimRed 0.2.1 and 0.2.2","title":"dimRed 0.2.1 and 0.2.2","text":"CRAN release: 2018-11-09 Bugfix releases pass CRAN tests","code":""},{"path":"/news/index.html","id":"dimred-020","dir":"Changelog","previous_headings":"","what":"dimRed 0.2.0","title":"dimRed 0.2.0","text":"CRAN release: 2018-11-08 Added R-Journal paper Vignette Added UMAP Added NMF (thanks @topepo) Added possibility return data distance matrices/eigenvalues Added Autoencoder Added l1 PCA Added getNDim Added ndim parameter many quality functions. fixed bug kPCA inverse computable. added autoencoder","code":""},{"path":"/news/index.html","id":"dimred-010","dir":"Changelog","previous_headings":"","what":"dimRed 0.1.0","title":"dimRed 0.1.0","text":"CRAN release: 2017-05-04 Fixed kPCA predict function documentation typos (@topepo #2) Added predict inverse functions Added function extract rotation matrices PCA FastICA","code":""},{"path":"/news/index.html","id":"dimred-003","dir":"Changelog","previous_headings":"","what":"dimRed 0.0.3","title":"dimRed 0.0.3","text":"CRAN release: 2017-01-19 First version CRAN","code":""}]
